require_relative "../app/models/user.rb"
require_relative "../app/models/note.rb"

users = [
	[ "avi", "Avi F.", "Founder of Flatiron School", "flatiron" ],
	[ "liz", "Liz L.", "Coolest coder you know", "hogwarts" ],
	[ "megan", "Megan K.", "I have two cats and a dog and sometimes I write stuff", "electra" ],
	[ "thomas", "Thomas W.", "First time coder, long time friend... follow me on twitter @beinglogical", "creator" ]
	[ "nina", "Nina W.", "Mostly harmless", "newjersey" ]
 ]
 
 users.each do |username, name, profile, password|
	User.create( username: username, name: name, profile: profile, password: password )
 end

 notes = [
	 [ topic: "Darkweb Tools", 
		content: "## Tools\r\n- Windscribe VPN\r\n- Tails OS\r\n- Tor Browser\r\n\r\n\r\n## Useful Onion Sites:\r\ngrams7enufi7jmdl.onion/\r\n\r\nthehiddenwiki.org\r\n\r\n__Dream Market:__ eajwlvm3z2lcca76.onion\r\n\r\n__Deep.Dot.Web:__ deepdot35wvmeyd5.onion/\r\n\r\n__Anonymous OS:__ yuxv6qujajqvmypv.onion/\r\n\r\n__Tips:__ zqktlwi4fecvo6ri.onion/wiki/Anonymity\r\n", 
		user_id: 4 ],
	 [ topic: "Sinatra Project Requirements", 
		content: "## Specifications for the Sinatra Assessment\r\n\r\n### Specs:\r\n- Use Sinatra to build the app\r\n - The Sinatra Ruby gem is included in the Gemfile\r\n - In ./app/controllers, Sinatra routes are defined to handle HTTP requests and responses\r\n\r\n- Use ActiveRecord for storing information in a database\r\n - The ActiveRecord Ruby gem is included in the Gemfile\r\n - In ./config/environment a connection is established between ActiveRecord and a SQLite database\r\n\r\n- Include more than one model class (e.g. User, Post, Category)\r\n\r\n- Include at least one has_many relationship on your User model (e.g. User has_many Posts)\r\n\r\n- Include at least one belongs_to relationship on another model (e.g. Post belongs_to User)\r\n\r\n- Include user accounts with unique login attribute (username or email)\r\n\r\n- Ensure that the belongs_to resource has routes for Creating, Reading, Updating and Destroying\r\n\r\n- Ensure that users can't modify content created by other users\r\n\r\n- Include user input validations\r\n\r\n- Your README.md includes a short description, install instructions, a contributors guide and a link to the license for your code\r\n\r\n### Bonus (Optional)\r\n- Display validation failures to user with error message (example form URL e.g. /posts/new)\r\n\r\n### Confirm\r\n- You have a large number of small Git commits\r\n\r\n- Your commit messages are meaningful\r\n\r\n- You made the changes in a commit that relate to the commit message\r\n\r\n- You don't include changes in a commit that aren't related to the commit message\r\n", 
		user_id: 1 ],
	 [ topic: "What to Prioritize in the Sinatra Section", 
		content: "## DO Prioritize:\r\n\r\n**ORMs and ActiveRecord Unit: Migrations, CRUD Intro, and Associations**\r\n\r\nAfter this unit you should be able to:\r\n- Understand that migrations are what we write to make changes to our database.\r\n- Explain when the `schema` changes.\r\n- Explain and demonstrate in `tux` how we access objects through ActiveRecord associations defined in our models. (Ex: `current_user.posts` — will return an array of posts that belong to the `current_user` object. Where is the `.posts` method defined?)\r\n\r\n**Rack Unit: How the Internet Works, Request/Response Flow, Routes**\r\n\r\nDouble down on\r\n- Difference between `get`, `post`, `patch`, and `delete` requests and responses.\r\n- How \"Dynamic URL Routes\" work.\r\n- Practice solidifying your understanding of the Request/Response Flow by drawing your own diagrams of this flow\r\n\r\n**MVC and Forms Unit: Model, View, Controller (MVC)**\r\n\r\nGet comfortable with why we use this file structure, as MVC will be present in most applications. The MVC structure allows us to separate our application's concern, ultimately optimizing functionality and code organization. A popular analogy that is used is to think about the MVC file structure as a restaurant.\r\n\r\n 1. **Model (Database):** Think of the \"model\" as a the kitchen where the chef is preparing the food, in our case ActiveRecord could be considered the chef and the food is our data.\r\n\r\n 2. **View (The Frontend of our Application):** Think of the view as the plate of food that the customer finally sees, this could be considered the \"frontend\" of our application.\r\n\r\n 3. **Controller (Intermediary for the Model and View):** Think of the controller as the waiter goes back and forth between the kitchen and the customer's table. The waiter delivers the plate of food from the kitchen to the customer (end user/frontend) and returns back to the kitchen at the customers request — the plate/customer could be considered the \"view\" in this analogy.\r\n\r\nAt the end of this unit you should be able to explain the MVC flow in your own words.\r\n\r\n**ActiveRecord Unit: CRUD, Authentication, ActiveRecord Associations**\r\n\r\n**\"Sinatra ActiveRecord CRUD\" Lab:** Be sure to get tons of practice with building out Create, Read, Update, and Delete (CRUD) functionality in an application. Not only will CRUD be the basis for the functionality of your Sinatra Final Project, but CRUD is also the base functionality for a lot of the apps we use today like note apps and social media apps like Instagram.\r\n\r\nBe able to answer questions like:\r\n\r\n1. What is the difference between rendering vs. redirecting?\r\n2. Where do the instance variables in our view files come from — where are they declared and how do we have access to them?\r\n\r\n- **\"User Authentication in Sinatra\" and \"Securing Passwords in Sinatra\" Labs:** Double down on these labs to confirm your understanding of the authentication flow in Sinatra. Check for understanding by answering these questions:\r\n\r\n1. What is a `session`? How do I enable it in my application and why?\r\n2. What are the basics of ActiveRecord's `has_secure_password` method?\r\n3. What does the `.authenticate` method do and how is it connected to the `has_secure_password` method?\r\n4. Why do we use the `bcrypt` gem and what is the significance of adding the `password_digest` column to the `User` model in the database?\r\n\r\n## DON'T Spend _Too_ Much Time Here:\r\n\r\n**SQL (Structured Query Language) Unit**\r\n\r\nLet's begin by saying SQL is an important unit. This unit is basically a primer on how we read the queries to our database that will be displayed in our console when our program is running. Being able to read these queries becomes important when we want to do things like debug or collect context clues for an error related to our database. BUT spoiler alert: ActiveRecord will \"write\" and \"read\" SQL for us. This unit is dedicated to priming us to the power of database queries and ActiveRecord, so no need to deep dive here _but_ definitely familiarize yourself with SQL queries — being able to read this language comes in handy when investigating the behavior of your database.\r\n\r\n**ORMs Sub-Unit**\r\n\r\nWhile ORM is an important concept, at this point it's sufficient to understand it _at a high level_. This sub-unit can get really abstract and it's easy to get lost in the weeds here. Just think of this sub-unit as us laying down the ground work to introduce you to the ActiveRecord magic.\r\n\r\n**HTML Continued and CSS Continued Units**\r\n\r\nWE KNOW...these units are so fun! This is a _really_ exciting time in the curriculum where we finally spend sometime in the browser. In the CLI section we were in the console for so long that it's really tempting to spend a lot of time here on all the front-end fun. By all means don't skip this section as we are building projects as portfolio pieces and we want them to shine! But at this stage, it would be more wise to invest your time and energy resources in the units above. You can always dive deeper into HTML and CSS later in or after the program.", 
		user_id: 3 ],
	 [ topic: "Sinatra Complex Forms", 
		content: "### Add seed data here. Seed your database with `rake db:seed` save as seeds.rb in db dir\r\n```ruby\r\nsophie = Owner.create(name: \"Sophie\")\r\nPet.create(name: \"Maddy\", owner: sophie)\r\nPet.create(name: \"Nona\", owner: sophie)\r\n```\r\n### application_controller\r\n```ruby\r\nclass ApplicationController < Sinatra::Base\r\n register Sinatra::ActiveRecordExtension\r\n set :session_secret, \"my_application_secret\"\r\n set :views, Proc.new { File.join(root, \"../views/\") }\r\nend\r\n```\r\n### owners_controller.rb\r\n```ruby\r\nclass OwnersController < ApplicationController\r\nend\r\n```\r\n### Want form to dynamically offer existing pets as checkbox options in form\r\n### First load pets from db\r\n### /controllers/owners_controller.rb\r\n\r\n```ruby\r\nget '/owners/new' do\r\n @pets = Pet.all\r\n erb :'/owners/new'\r\nend\r\n```\r\n\r\n### views/owners/new.erb\r\n```ruby\r\n<% @pets.each do |pet| %>\r\n <input type=\"checkbox\" name=\"owner[pet_ids][]\" id=\"<%= pet.id %>\" value=\"<%= pet.id %>\"><%= pet.name %><br>\r\n<% end %>\r\n```\r\n\r\n### Checkbox name \"owner[pet_ids][]\"; structures params hash so array of pet IDs is stored inside the \"owner\" hash. \r\n### Associate the pets that have these IDs with the new owner. \r\n### Checkbox value is pet's ID, when checkbox selected, the value(ID) is sent to params\r\n\r\n### Hash creating:\r\n```ruby\r\n{\"owner\"=>{\"name\"=>\"Adele\", \"pet_ids\"=>[\"1\", \"2\"]}}\r\n```\r\n### AR can take param key of pet_ids, find pets w/ corresponding IDs and make association between the owner and the pets she owns\r\n\r\n```ruby\r\npost '/owners' do\r\n @owner = Owner.create(params[:owner])\r\n redirect \"/owners/\#{@owner.id}\"\r\nend\r\n```\r\n\r\n### Add ability to owners new form to add new pets\r\n`<input type=\"text\" name=\"pet[name]\" id=\"pet_name\"></input>`\r\n\r\n### Hash looks like this:\r\n`{\"owner\"=>{\"name\"=>\"Adele\", \"pet_ids\"=>[\"1\", \"2\"]}, \"pet\"=>{\"name\"=>\"Fake Pet\"}}`\r\n\r\n### Use params to create new pet obj and shovel into owner's pets array\r\n`@owner.pets << Pet.create(name: params[\"pet\"][\"name\"])`\r\n\r\n### If statment provides input validation\r\n```ruby\r\npost '/owners' do\r\n @owner = Owner.create(params[:owner])\r\n if !params[\"pet\"][\"name\"].empty?\r\n @owner.pets << Pet.create(name: params[\"pet\"][\"name\"])\r\n end\r\n redirect \"owners/\#{@owner.id}\"\r\nend\r\n```", 
		user_id: 2 ],
		[  ]
 ]

 notes.each do |topic, content, user_id|
	Note.create( topic: topic, content: topic, user_id: user_id )






=begin
 notes = [
	 [ "Darkweb Tools", 
		"## Tools\r\n- Windscribe VPN\r\n- Tails OS\r\n- Tor Browser\r\n\r\n\r\n## Useful Onion Sites:\r\ngrams7enufi7jmdl.onion/\r\n\r\nthehiddenwiki.org\r\n\r\n__Dream Market:__ eajwlvm3z2lcca76.onion\r\n\r\n__Deep.Dot.Web:__ deepdot35wvmeyd5.onion/\r\n\r\n__Anonymous OS:__ yuxv6qujajqvmypv.onion/\r\n\r\n__Tips:__ zqktlwi4fecvo6ri.onion/wiki/Anonymity\r\n", 
		4 ],
	 [ "Sinatra Project Requirements", 
		"## Specifications for the Sinatra Assessment\r\n\r\n### Specs:\r\n- Use Sinatra to build the app\r\n - The Sinatra Ruby gem is included in the Gemfile\r\n - In ./app/controllers, Sinatra routes are defined to handle HTTP requests and responses\r\n\r\n- Use ActiveRecord for storing information in a database\r\n - The ActiveRecord Ruby gem is included in the Gemfile\r\n - In ./config/environment a connection is established between ActiveRecord and a SQLite database\r\n\r\n- Include more than one model class (e.g. User, Post, Category)\r\n\r\n- Include at least one has_many relationship on your User model (e.g. User has_many Posts)\r\n\r\n- Include at least one belongs_to relationship on another model (e.g. Post belongs_to User)\r\n\r\n- Include user accounts with unique login attribute (username or email)\r\n\r\n- Ensure that the belongs_to resource has routes for Creating, Reading, Updating and Destroying\r\n\r\n- Ensure that users can't modify content created by other users\r\n\r\n- Include user input validations\r\n\r\n- Your README.md includes a short description, install instructions, a contributors guide and a link to the license for your code\r\n\r\n### Bonus (Optional)\r\n- Display validation failures to user with error message (example form URL e.g. /posts/new)\r\n\r\n### Confirm\r\n- You have a large number of small Git commits\r\n\r\n- Your commit messages are meaningful\r\n\r\n- You made the changes in a commit that relate to the commit message\r\n\r\n- You don't include changes in a commit that aren't related to the commit message\r\n", 
		1 ],
	 [ "What to Prioritize in the Sinatra Section", 
		"## DO Prioritize:\r\n\r\n**ORMs and ActiveRecord Unit: Migrations, CRUD Intro, and Associations**\r\n\r\nAfter this unit you should be able to:\r\n- Understand that migrations are what we write to make changes to our database.\r\n- Explain when the `schema` changes.\r\n- Explain and demonstrate in `tux` how we access objects through ActiveRecord associations defined in our models. (Ex: `current_user.posts` — will return an array of posts that belong to the `current_user` object. Where is the `.posts` method defined?)\r\n\r\n**Rack Unit: How the Internet Works, Request/Response Flow, Routes**\r\n\r\nDouble down on\r\n- Difference between `get`, `post`, `patch`, and `delete` requests and responses.\r\n- How \"Dynamic URL Routes\" work.\r\n- Practice solidifying your understanding of the Request/Response Flow by drawing your own diagrams of this flow\r\n\r\n**MVC and Forms Unit: Model, View, Controller (MVC)**\r\n\r\nGet comfortable with why we use this file structure, as MVC will be present in most applications. The MVC structure allows us to separate our application's concern, ultimately optimizing functionality and code organization. A popular analogy that is used is to think about the MVC file structure as a restaurant.\r\n\r\n 1. **Model (Database):** Think of the \"model\" as a the kitchen where the chef is preparing the food, in our case ActiveRecord could be considered the chef and the food is our data.\r\n\r\n 2. **View (The Frontend of our Application):** Think of the view as the plate of food that the customer finally sees, this could be considered the \"frontend\" of our application.\r\n\r\n 3. **Controller (Intermediary for the Model and View):** Think of the controller as the waiter goes back and forth between the kitchen and the customer's table. The waiter delivers the plate of food from the kitchen to the customer (end user/frontend) and returns back to the kitchen at the customers request — the plate/customer could be considered the \"view\" in this analogy.\r\n\r\nAt the end of this unit you should be able to explain the MVC flow in your own words.\r\n\r\n**ActiveRecord Unit: CRUD, Authentication, ActiveRecord Associations**\r\n\r\n**\"Sinatra ActiveRecord CRUD\" Lab:** Be sure to get tons of practice with building out Create, Read, Update, and Delete (CRUD) functionality in an application. Not only will CRUD be the basis for the functionality of your Sinatra Final Project, but CRUD is also the base functionality for a lot of the apps we use today like note apps and social media apps like Instagram.\r\n\r\nBe able to answer questions like:\r\n\r\n1. What is the difference between rendering vs. redirecting?\r\n2. Where do the instance variables in our view files come from — where are they declared and how do we have access to them?\r\n\r\n- **\"User Authentication in Sinatra\" and \"Securing Passwords in Sinatra\" Labs:** Double down on these labs to confirm your understanding of the authentication flow in Sinatra. Check for understanding by answering these questions:\r\n\r\n1. What is a `session`? How do I enable it in my application and why?\r\n2. What are the basics of ActiveRecord's `has_secure_password` method?\r\n3. What does the `.authenticate` method do and how is it connected to the `has_secure_password` method?\r\n4. Why do we use the `bcrypt` gem and what is the significance of adding the `password_digest` column to the `User` model in the database?\r\n\r\n## DON'T Spend _Too_ Much Time Here:\r\n\r\n**SQL (Structured Query Language) Unit**\r\n\r\nLet's begin by saying SQL is an important unit. This unit is basically a primer on how we read the queries to our database that will be displayed in our console when our program is running. Being able to read these queries becomes important when we want to do things like debug or collect context clues for an error related to our database. BUT spoiler alert: ActiveRecord will \"write\" and \"read\" SQL for us. This unit is dedicated to priming us to the power of database queries and ActiveRecord, so no need to deep dive here _but_ definitely familiarize yourself with SQL queries — being able to read this language comes in handy when investigating the behavior of your database.\r\n\r\n**ORMs Sub-Unit**\r\n\r\nWhile ORM is an important concept, at this point it's sufficient to understand it _at a high level_. This sub-unit can get really abstract and it's easy to get lost in the weeds here. Just think of this sub-unit as us laying down the ground work to introduce you to the ActiveRecord magic.\r\n\r\n**HTML Continued and CSS Continued Units**\r\n\r\nWE KNOW...these units are so fun! This is a _really_ exciting time in the curriculum where we finally spend sometime in the browser. In the CLI section we were in the console for so long that it's really tempting to spend a lot of time here on all the front-end fun. By all means don't skip this section as we are building projects as portfolio pieces and we want them to shine! But at this stage, it would be more wise to invest your time and energy resources in the units above. You can always dive deeper into HTML and CSS later in or after the program.", 
		3 ],
	 [ "Sinatra Complex Forms", 
		"### Add seed data here. Seed your database with `rake db:seed` save as seeds.rb in db dir\r\n```ruby\r\nsophie = Owner.create(name: \"Sophie\")\r\nPet.create(name: \"Maddy\", owner: sophie)\r\nPet.create(name: \"Nona\", owner: sophie)\r\n```\r\n### application_controller\r\n```ruby\r\nclass ApplicationController < Sinatra::Base\r\n register Sinatra::ActiveRecordExtension\r\n set :session_secret, \"my_application_secret\"\r\n set :views, Proc.new { File.join(root, \"../views/\") }\r\nend\r\n```\r\n### owners_controller.rb\r\n```ruby\r\nclass OwnersController < ApplicationController\r\nend\r\n```\r\n### Want form to dynamically offer existing pets as checkbox options in form\r\n### First load pets from db\r\n### /controllers/owners_controller.rb\r\n\r\n```ruby\r\nget '/owners/new' do\r\n @pets = Pet.all\r\n erb :'/owners/new'\r\nend\r\n```\r\n\r\n### views/owners/new.erb\r\n```ruby\r\n<% @pets.each do |pet| %>\r\n <input type=\"checkbox\" name=\"owner[pet_ids][]\" id=\"<%= pet.id %>\" value=\"<%= pet.id %>\"><%= pet.name %><br>\r\n<% end %>\r\n```\r\n\r\n### Checkbox name \"owner[pet_ids][]\"; structures params hash so array of pet IDs is stored inside the \"owner\" hash. \r\n### Associate the pets that have these IDs with the new owner. \r\n### Checkbox value is pet's ID, when checkbox selected, the value(ID) is sent to params\r\n\r\n### Hash creating:\r\n```ruby\r\n{\"owner\"=>{\"name\"=>\"Adele\", \"pet_ids\"=>[\"1\", \"2\"]}}\r\n```\r\n### AR can take param key of pet_ids, find pets w/ corresponding IDs and make association between the owner and the pets she owns\r\n\r\n```ruby\r\npost '/owners' do\r\n @owner = Owner.create(params[:owner])\r\n redirect \"/owners/\#{@owner.id}\"\r\nend\r\n```\r\n\r\n### Add ability to owners new form to add new pets\r\n`<input type=\"text\" name=\"pet[name]\" id=\"pet_name\"></input>`\r\n\r\n### Hash looks like this:\r\n`{\"owner\"=>{\"name\"=>\"Adele\", \"pet_ids\"=>[\"1\", \"2\"]}, \"pet\"=>{\"name\"=>\"Fake Pet\"}}`\r\n\r\n### Use params to create new pet obj and shovel into owner's pets array\r\n`@owner.pets << Pet.create(name: params[\"pet\"][\"name\"])`\r\n\r\n### If statment provides input validation\r\n```ruby\r\npost '/owners' do\r\n @owner = Owner.create(params[:owner])\r\n if !params[\"pet\"][\"name\"].empty?\r\n @owner.pets << Pet.create(name: params[\"pet\"][\"name\"])\r\n end\r\n redirect \"owners/\#{@owner.id}\"\r\nend\r\n```", 
		2 ],
		[ "How Children Learn",
			"### Learning About Children\r\n\r\n* A particular skill is not \"located\" in any one part of your brain, but you can say that one part of your brain is critical to carrying out a particular skill.\r\n* It is difficult to separate what we think about something from what we feel about it.\r\n* We cannot learn how children normally operate in experiments performed under artificial or even threatening circumstances.\r\n* It is only in the presence of loving, respectful, trusting adults that children will learn all they are capable of learning, or reveal to us what they are learning.\r\n\r\n### Games & Experiments\r\n\r\n* Carl Orff showed that when children are given many opportunities to improvise, to make up their own chants, rhythms, and tunes, their musical and verbal growth can be very rapid.\r\n* A child has no stronger desire than to make sense of the world, to move freely in it, and to imitate bigger people. So there must be something very strong with much of what we do in school if we feel the need to worry so much about \"motivation.\"\r\n* Keeping children from touching anything that is not theirs dampers their confidence. Instead we should teach children to treat objects carefully, use them as they are meant to be used, and to put the objects back where they belong.\r\n* It must be exciting for a child, playing a game with an adult, to feel that by doing a certain thing, he can make that omnipotent giant do something, and that he can keep this up for as long as he likes.\r\n* Very young children have what we could call an Instinct of Workmanship. They want to do something as well as they can, not to please someone else but to please themselves.\r\n* Children don't seem to be born fearful of things. They learn what to fear from their elders.\r\n* Children, especially young ones, are very sensitive to emotion. They not only catch everything they feel, but blow it up to a larger-than-life size.\r\n* Children are cruel to each other, but they become distressed if near another child who is badly hurt or very unhappy. Few children are capable of the kind of sustained, deliberate cruelty so often shown by adults.\r\n* All children want and strive for increased mastery and control of the world around them, and all are to some degree humiliated, threated, and frightened by finding out that they don't have it.\r\n* The word *no*, for a two-year old, is the Declaration of Independence and the Magna Carta rolled into one.\r\n* To many four-year olds, doing a puzzle is only a means to an end, namely gaining the approval of the teacher or of each other. To a younger child, not in a very competitive or status-conscious situation, such a task is an end in itself.\r\n* It's useless to urge on people who are down; that just frightens or discourages them more. Instead we must draw them back, take off the pressure, reassure them, console them, and give them time to regain enough energy and courage to go back to the task.\r\n* The best games with children flow easily and naturally from the situation of the moment, and we must be ready to give up a game instantly and without regret if the child is not enjoying it.\r\n* Children find it fun to do something wrong that they know how to do right. Adults tend to discourage it, but we should enjoy and encourage it, as it is not always necessary to be right.\r\n* Children can use the scientific method, or the selective use of trial and error, to find something out, and are even conscious of using it.\r\n* When more people were craftsmen, children could easily learn by watching them. Now this is more difficult, because most work is not work as a child could understand it, and much work is now done by machines.\r\n* When a game teaches how something works, it also teaches that many actions have regular and predictable effects, and that the world is in many ways a sensible and trustworthy place.\r\n* Children resist unasked-for teaching because they hear in it the (perhaps unconscious) message, \"You're not smart enough to see that this is important to learn, and even if you were, you're not smart enough to learn it.\"\r\n* Children will ask for help if they need it. But sending them messages of doubt and distrust may destroy their confidence in their ability to learn for themselves, and convince them that they are too lazy, incurious, and stupid to learn.\r\n* One of the many great advantages of home-schooled education is that children have a chance to see their parents and other adults work, and to join in if they wish.\r\n* When playing with an instrument or machine for the first time, children must pile up quite a mass of raw sensory data before they can begin trying to sort it out and how to make sense of it.\r\n* A trained scientist asks nature a question and then cuts the noise of information to a minimum. But to a child in a strange world, everything is noise, and until he has a great deal of data, he has no idea what questions to ask or what questions there are to be asked.\r\n* Consequently, children are better able to tolerate confusing data, to pick out its patterns. They are also less likely to make fast conclusions on the basis of too little data, or after having made such conclusions, to refuse to consider new and contradictory data.\r\n\r\n### Talk\r\n\r\n* To a baby, how a sound feels seems to be as important as the sound itself.\r\n* A puppy raised apart from other dogs will know how to bark when he gets old enough, but it is from hearing people speak around them that babies get the idea of \"speaking.\"\r\n* Perhaps two-year olds are so touchy because they discovered that they don't know how to talk; they are bursting with things to say, needs, and feelings, but have no way to say them.\r\n* Children learn to speak by patient and persistent experiment. Above all, they are willing to do things wrong even while trying their best to do them right.\r\n* Babies and young children like to hear adult conversation, and will often sit quietly for a long time just to hear it. To help little children as they learn to talk, talk to them, and let them be around when we talk to others.\r\n* When we name an object, we put it into a class of things that are like it. But babies do not, for some time they see just a mass of shifting shapes and colors, a single, ever-changing picture in front of them, and not as separate elements.\r\n* A baby is only ready to assign a name to something when he sees that is independent of its environment, and that the something is one of a family or class of like things.\r\n* We only learn words after grasping the large idea of communication by speech, then interpreting tone and context, and finally intuiting a rough outline of the grammar or structure of language.\r\n* Too much quizzing of a child is likely to make him begin to think that learning does not mean figuring out how things work, but getting and giving answers that please grownups.\r\n* A child's understanding of the world is uncertain and tentative. His understanding will grow faster if we can make ourselves have faith in it and leave it alone.\r\n* A family with little verbal skill can handicap a baby. Not just because there is so little talk, but also because, when the baby does try to talk, he is less often understood and thus less often encouraged.\r\n* Because children are so small, clumsy, inarticulate, foolish, and to some appealing, we easily underestimate the seriousness of many of their questions and concerns, and laugh at them indulgently or ignore them altogether.\r\n* Children will learn the language that most people speak around them. If a child grows up where people do not speak standard English, then we will do harm if we try to make him think that there is something wrong with his speech.\r\n* Children's senses are keen, they notice everything, and they want to do things like the grownups. If we speak well, and they hear us, then they will soon speak as we do.\r\n* Children will not \"freeze\" mistakes as bad habits. They instead make successive approximations, where they try, make mistakes, and then correct those mistakes.\r\n* If it takes a long time to develop a good habit, then it will take just as long to develop a bad one. So we don't always have to be in such a big hurry to correct children's mistakes.\r\n* Children are good at gathering and storing vague information and waiting patiently until, someday, they find they know what it means.\r\n* Maybe children don't like to hear stories of when they were younger because, to them, their littleness, helplessness, and clumsiness is not cute but humiliating, and so they don't want to be reminded of it.\r\n* The children need the most practice talking in school, but typically the teacher gets it. A child only talks to the teacher, and only when called upon.\r\n* To give children more opportunity to speak, we could let them work in small groups, and to talk quietly as they work. This also encourages independent study and more thinking.\r\n* We only get better at using words, whether hearing, speaking, reading, or writing, if we use those words to say something that we want to say, to people we want to say it to, and for purposes that are our own.", 
			5 ],
		 [ "How to Win Friends", 
			"### Part 1: Fundamental Techniques in Handling People\r\n\r\n#### Chapter 1\r\n* pg 5: Criticism is futile because it makes one strive to justify himself; it’s dangerous because it wounds pride and arouses resentment.\r\n* pg 13: When dealing with people, you aren’t dealing with creatures of logic, but creatures of emotion motivated by pride and vanity.\r\n\r\n#### Chapter 2\r\n* pg 17: Everyone has a desire to feel important; praise can fulfill this desire and serve as a strong motivator.\r\n* pg 26: Don’t confuse flattery with appreciation; flattery is insincere and selfish.\r\n\r\n#### Chapter 3\r\n* pg 31: To influence people, talk about what they want and show them how to get it; don’t talk about what you want.\r\n* pg 42: The world is so full of self-seeking people, that an individual that tries to unselfishly tries to serve others has an enormous advantage.\r\n\r\n### Part 2: Six Ways to Make People Like You\r\n\r\n#### Chapter 1\r\n* pg 52: Win friends by being genuinely interested in other people, instead of trying to get other people interested in you.\r\n* pg 58: Put yourself out to do things for other people that require time, energy, unselfishness, and thoughtfulness.\r\n\r\n#### Chapter 2\r\n* pg 64: There's more information in a smile than a frown, so encouragement is a more effective teacher than punishment.\r\n* pg 67: Fake a smile; act as though you were already happy, and that will tend to make you happy.\r\n* pg 68: Most folks are about as happy as they make up their minds to be.\r\n\r\n#### Chapter 3\r\n* pg 73: People find their name the most interesting of all; remembering that name and calling it easy is an effective compliment.\r\n* pg 78: The information we impart or request we make takes on special importance when we approach with a name.\r\n\r\n#### Chapter 4\r\n* pg 84: A violent critic is subdued in the presence of a patient, sympathetic listener, as all they desire is an audience.\r\n* pg 88: People are more interested in themselves and their wants and problems than they are in you and your problems.\r\n\r\n#### Chapter 5\r\n* pg 89: The road to a person's heart is to talk about the things he or she treasures most; research those things if you must.\r\n\r\n#### Chapter 6\r\n* pg 96: Obey the golden rule, and do unto others as you would have others do unto you.\r\n* pg 98: All people you meet feel superior to you in some way; in some subtle way, recognize their importance sincerely.\r\n\r\n### Part 3: How to Win People to Your Way of Thinking\r\n\r\n#### Chapter 1\r\n* pg 111: Avoid arguments; the loser of an argument has his pride hurt, and will likely remain unconvinced anyway.\r\n* pg 113: Arguing allows a person to feel important by asserting their authority; admitting their importance disarms them.\r\n* pg 114: Distrust your first instinctive impression, and give your opponent a chance to talk without defense or debate.\r\n\r\n#### Chapter 2\r\n* pg 117: If proving someone wrong, do it subtly and adroitly, so you don't arouse opposition and handicap yourself.\r\n* pg 118: Admitting you may be wrong will stop all argument and inspire fairness and open-mindedness in your opponent.\r\n\r\n#### Chapter 3\r\n* pg 129: Saying about yourself the derogatory things someone else wants to say may improve their disposition.\r\n* pg 130: Admitting your errors clears the air of guilt and defensiveness, but often helps solve the problem created by the error.\r\n\r\n#### Chapter 4\r\n* pg 137: To win someone to your cause, first convince him that you are a sincere friend.\r\n\r\n#### Chapter 5\r\n* pg 144: Begin by emphasizing what you agree on; keep emphasizing, if possible, that you want the same end with different methods.\r\n* pg 145: Keep your opponent from saying “no”; a “yes” response moves their psychological process in the affirmative direction.\r\n\r\n#### Chapter 6\r\n* pg 152: Almost every successful person likes to reminisce about early struggles; use this to let them talk about themselves.\r\n* pg 154: When our friends excel us, they feel important; when we excel them, they feel inferior and envious, so let them talk profusely.\r\n\r\n#### Chapter 7\r\n* pg 156: Let the other person feel that the idea is his or hers; no one likes to feel that they’re being forced upon.\r\n\r\n#### Chapter 8\r\n* pg 161: Understand why a person thinks and acts how he does, and you have the key to his actions and personality.\r\n* pg 165: Think in terms of the other person's point of view, and see things from that angle as well as your own.\r\n\r\n#### Chapter 9\r\n* pg 168: Giving people the sympathy they thirst for can create good will and make them listen attentively.\r\n\r\n#### Chapter 10\r\n* pg 175: Appeal to the noble motives of someone, and not what you think may be the real reason behind an action.\r\n\r\n#### Chapter 11\r\n* pg 182: Merely stating a truth is not enough; use showmanship to make it vivid, interesting, and dramatic.\r\n\r\n#### Chapter 12\r\n* pg 188: Issue a challenge; everyone loves the chance for self-expression, proving worth, to excel and to win.\r\n\r\n### Part 4: How to Change People Without Giving Offense or Arousing Resentment\r\n\r\n#### Chapter 1\r\n* pg 193: It i always easier to listen to unpleasant things after we have heard some praise for our good points.\r\n\r\n#### Chapter 2\r\n* pg 200: When following praise with criticism, join the two with \"and,\" not \"but,\" to avoid arousing resentment.\r\n* pg 201: Calling attention to mistakes indirectly works with sensitive people who may resent direct criticism.\r\n\r\n#### Chapter 3\r\n* pg 204: Before criticizing someone, begin by humbly admitting that you, too, are far from impeccable.\r\n* pg 206: Don't hesitate to admit your own mistakes, even the uncorrected ones, to change someone's behavior.\r\n\r\n#### Chapter 4\r\n* pg 208: Give suggestions and ask questions, don't give orders; this encourages cooperation, not rebellion.\r\n* pg 209: People are more likely to accept an order when part of the decision that led to its issue.\r\n\r\n#### Chapter 5\r\n* pg 214: You only destroy ego by causing someone to lose face, even if the other person is definitely wrong.\r\n\r\n#### Chapter 6\r\n* pg 217: B.F. Skinner showed that minimizing criticism and emphasizing praise reinforces only good behavior. \r\n* pg 219: Praise is more meaningful when singling out specific accomplishments, rather than general flattery.\r\n\r\n#### Chapter 7\r\n* pg 222: Give someone a reputation to live up to, treating the trait in need of improvement as an outstanding characteristic.\r\n\r\n#### Chapter 8\r\n* pg 227: Find a way to convince someone that they have an undeveloped flair for whatever they're attempting.\r\n\r\n#### Chapter 9\r\n* pg 232: Always make the other person happy about doing the thing you suggest.\r\n* pg 234: Put your request in a form that will convey to the other person the idea that they will personally benefit.", 
			5 ],
		 [ "Information Architecture for the Web", 
			"### Chapter 1: Defining Information Architecture\r\n* pg 5: Structuring mean identifying information \"atoms,\" organizing means grouping them into categories, and labeling is naming those categories.\r\n* pg 5: An information architecture must balance the needs of users with the goals of the business.\r\n* pg 10: Experience design is an umbrella term for information architecture, usability engineering, graphic design, and interaction design.\r\n* pg 12: Information architecture can make money, save money, improve employee or customer satisfaction, or make the world a better place.\r\n\r\n### Chapter 2: Practicing Information Architecture\r\n* pg 21: If the lone information architect on a site, work with outsiders to help understand the needs of the user better.\r\n* pg 22: Ideally, the IA is responsible for only the site's architecture, not its other aspects, so IA is not ignored for more visible and tangible stuff.\r\n* pg 24: Effective IA relies on understanding the intersection of context, content, and users.\r\n* pg 26: For context, your IA provides a tangible snapshot of your organization's mission, vision, values, strategy, and culture.\r\n* pg 27: Your IA must reflect the ownership, format, structure, metadata, volume, and dynamicism of your content.\r\n* pg 28: Your IA must account for user behavior, like who uses your site, how they use it, and what information they want from it.\r\n\r\n### Chapter 3: User Needs and Behaviors\r\n* pg 30: An IA must not just understand the user's needs, but his information-seeking behaviors.\r\n* pg 34: A user needs a particular item (known-item seeking), a few good things and iterates (exploratory seeking), or everything (exhaustive research).\r\n* pg 35: Searching, browsing, and asking are information-seeking behaviors, and good sites integrate them, or allow transitioning between them easily.\r\n* pg 37: The \"pearl-growing\" model assumes you start with a document you need, and allows finding similar ones, such as through tagging.\r\n* pg 38: To learn about the information needs of users, practice search analytics, or reviewing the common queries in the search logs.\r\n\r\n### Chapter 4: The Anatomy of Information Architecture\r\n* pg 44: Top-down information architecture is where a site has been designed to anticipate users' information needs and is structured to address them.\r\n* pg 47: Bottom-up information architecture is where the implicit IA in content enables answers to users' information needs to \"rise up.\"\r\n* pg 48: Bottom-up IA is important because users are likely to bypass top-down architecture, landing at a page using deep links or search results.\r\n* pg 51: In content, headings, embedded links, metadata, lists, and identifiers (e.g. a logo) are all IA components.\r\n\r\n### Chapter 5: Organization Systems\r\n* pg 55: Ambiguity leads to difficulty in organizing information -- e.g. ambiguity of what a label means, or ambiguity of what label to apply to something.\r\n* pg 57: The different levels of granularity of documents, and differing characteristics of formats, makes organization of heterogeneous content hard.\r\n* pg 59: Exact organization schemes are unambiguous, which allow known-item searching, which are: alphabetical, chronological, and geographical.\r\n* pg 61: Unambiguous organization schemes are subjective, but are useful because you don't always know what you're looking for.\r\n* pg 65: Audience-oriented schemes break a site into smaller, audience-specific mini sites; if open, users can go between mini-sites.\r\n* pg 67: Be careful of blending together different organization schemes (topic, task, audience, metaphor), which clouds a user's mental model.\r\n* pg 70: Be aware of, but not bound by, the idea that hierarchical categories in an organizational structure are mutually exclusive.\r\n* pg 73: New sites should favor the broad-and-shallow hierarchy, because adding items to secondary levels is less problematic.\r\n* pg 74: Metadata allows applying the power of databases to the heterogeneous, unstructured environments of web sites.\r\n* pg 78: Free tagging creates a bottom-up categorical structure, called a folksonomy.\r\n\r\n### Chapter 6: Labeling Systems\r\n* pg 83: Labels should speak the same language as a site's users, and educate them on new concepts or quickly identify familiar ones.\r\n* pg 87: When creating contextual links (hyperlinks), ask what information the user would expect to find if clicked to ensure they are representational.\r\n* pg 92: Navigation systems have a small number of options and appear throughout the site, so their labels demand consistent application.\r\n* pg 94: Navigational labels can be augmented by brief descriptions, or scope notes, when introduced on the main page.\r\n* pg 95: Index terms can be generated by metadata, such as the META tag in the HTML, and can provide a view across different information silos.\r\n* pg 98: Only use iconic labels if your site has patient, loyal uses willing to learn your visual language.\r\n* pg 99: Labels should have comprehensive scope, use audience terminology, and be consistent in style, presentation, syntax, and granularity.\r\n* pg 102: Professionals with subject-specific backgrounds may have created controlled vocabularies and thesauri you can use as labels.\r\n* pg 108: Free-listing is selecting an item and having subjects brainstorm terms to describe it, which are potential labels if common across items.\r\n* pg 109: Analyze search logs or folksonomic tags to indirectly generate labels that account for users' jargon, acronyms, and tone.\r\n\r\n### Chapter 7: Navigation Systems\r\n* pg 116: The global, local, and contextual navigation systems are the embedded navigation systems, wrapped around and infused with site content.\r\n* pg 119: The navigation system should be consistent, and should always show the user's location within the organizational hierarchy.\r\n* pg 123: On the main page, the global navigation can be expanded or supplemented with other navigation options.\r\n* pg 126: Hypertext links inlined in the content can be replaced with external links, which occupy a specific area of the page, that are easier to see.\r\n* pg 132: Supplemental navigation, like sitemaps, alphabetical indices, and search, are for when the taxonomy and embedded navigation fail.\r\n* pg 135: When designing an index, use term rotation, which uses synonyms or rotates words in a phrase so it appears more than once in the index.\r\n* pg 139: With personalization, we guess what content the user wants, and with customization, the user tells us what content he wants.\r\n* pg 140: Effective personalization can be hampered by the user's desire for privacy, or lack of time to teach the system.\r\n* pg 141: Since corporate intranets have a captive audience of repeat visitors, customization has a better chance of being used than on public sites.\r\n\r\n### Chapter 8: Search Systems\r\n* pg 148: If your site has a substantial amount of content, users will likely expect your site to have search.\r\n* pg 151: Defining search zones, or repositories of homogenous content, can keep the results from your search engine focused and relevant.\r\n* pg 154: Common ways to define search zones are by audience, by topic, or by chronology.\r\n* pg 158: Indexing numerous content components (title, summary, keywords, URL, body) for retrieval allows added flexibility in designing results.\r\n* pg 159: High recall returns numerous results of varying relevance; high precision returns just a few high quality results.\r\n* pg 163: When presenting results, display less information for users who know what they're looking for, and more for unsure users.\r\n* pg 167: Given too many results, allow a user to easily revise a search by populating the search box on the results page with the original query.\r\n* pg 169: Different ways to measure relevance work best for different content formats, so be careful when ranking heterogeneous content.\r\n* pg 171: Showing relevance scores can aggravate a sense of ignorance in the user if the relevant results are not first, so it's best to omit them.\r\n* pg 177: If the user is typically looking through hundreds of results, offer them a way to favorite the documents they like for easy recall later.\r\n* pg 178: If the content of your site is very dynamic, allow the user to save search queries so they can be re-executed later, even automatically.\r\n* pg 181: Users won't spend time crafting well-constructed queries, so simply give them a box for queries and a \"search\" button.\r\n* pg 183: Put the search box in the global navigation, so always available, and well away from other boxes (like ones for passwords).\r\n* pg 188: Integrate searching and browsing, where searching may yield a navigational section, and in that section search is restricted by zone.\r\n* pg 190: Given too many results, allow the user to revise the search from the results page, and search within their current set of results.\r\n* pg 191: Given no results, allow the user to revise the search, give them search tips, and offer a means of browsing.\r\n\r\n### Chapter 9: Thesauri, Controlled Vocabularies, and Metadata\r\n* pg 194: Metadata allows us to focus on how to describe a document, instead of pondering where it belongs in the taxonomy.\r\n* pg 195: A synonym ring is a set of words, which may include misspellings, that are equivalent for the purposes of retrieval.\r\n* pg 197: Synonym rings can increase recall, as more documents are returned, but reduce precision.\r\n* pg 198: Authority files are synonym rings in which one term has been defined as the preferred term or acceptable value.\r\n* pg 204: A thesaurus models equivalence relationships (synonyms), hierarchical relationships, and associative relationships (related terms).\r\n* pg 209: A classic thesaurus is used when indexing and searching, mapping variant terms to preferred terms in both stages.\r\n* pg 211: An indexing thesaurus is only used when indexing, but can still allow creation of browsable indexes of preferred terms.\r\n* pg 212: A searching thesaurus is only used when searching, and its development and maintenance costs are independent of content volume.\r\n* pg 216: A hierarchical relationship emerges when one has the characteristics of (generic relationship), is a part of (whole-part relationship), or is an instance of something else.\r\n* pg 217: The ANSI/ZISO Z239.19 standard for constructing English thesauri discusses many relationships for building related terms.\r\n* pg 218: The standard encourages for preferred terms: nouns, in the plural if countable, and abbreviations and acronyms if the popular use.\r\n* pg 221: Using compound terms in categories usually leads to polyhierarchy, which is challenging to represent in the navigational context.\r\n* pg 222: Faceted classification uses multiple taxonomies that focus on different dimensions of content.\r\n* pg 225: Guided navigation takes faceted classification further, allowing users to refine or narrow searches based on different facets of the results.\r\n\r\n### Chapter 10: Research\r\n* pg 233: A balanced approach to research focuses on context, content, and users, and how they all interact.\r\n* pg 234: Context focuses on goals, budgets, schedules, technology infrastructure, human resources, and corporate culture.\r\n* pg 236: Use an introductory presentation to sell IA to authors, developers, designers, marketing, and managers and get buy-in.\r\n* pg 239: Perform a gap-analysis, finding the disconnect between business goals, user needs, and practical limitations of the technology infrastructure.\r\n* pg 240: A heuristic evaluation is an expert critique of a site against principles and design guidelines, learning what to keep of the existing site.\r\n* pg 243: Content analysis extracts data or metadata from a representative content sample, and helps find patterns and relationships between items.\r\n* pg 245: Competitive benchmarking compares different sites, while before-and-after benchmarking compares different versions of the same site.\r\n* pg 247: Analytics tools can reveal effects of navigational changes to your site, but not why a user visits.\r\n* pg 248: Search log analysis can accurately reveal what users are looking for, in what volume.\r\n* pg 253: Focus groups don't work well for information architectures because people don't have the understanding or language to articulate about them.\r\n* pg 256: Open card sorts used for discovery allow the user to write his own labels; closed card sorts used for validation use prescribed labels.\r\n* pg 256: To explore alternate navigation paths, allow the user to copy cards, thereby cross-listing them in multiple categories.\r\n* pg 262: Do research so that the site won't have to be redesigned later at great cost, and to find out what users actually want.\r\n\r\n### Chapter 11: Strategy\r\n* pg 265: An IA strategy is a high-level conceptual framework for structuring and organizing a site, and is typically blurred with research.\r\n* pg 270: Communicate your ideas with peers using metaphors, stories, use cases, conceptual diagrams, wireframes, reports, and presentations.\r\n* pg 272: Wireframes are not fully-designed prototypes, but expose how users interact with the IA within the broader context of a web page.\r\n* pg 274: Metaphors can leverage the familiarity of organization, of tasks that can be performed, or understanding of images, icons, and colors.\r\n* pg 275: Write scenarios, or stories, to show how people with different needs and behaviors might navigate your site.\r\n* pg 278: Blueprints show relationships between pages and content components, while wireframes show the contents and links of major pages.",
			4 ],
		 [ "The Book on Writing",
			"### Section One: Writing Mechanics\r\n\r\n* Accuracy aside, simplicity, clarity, and brevity are the most important criteria for all writing. They form the bedrock of all good communication, and have for time immemorial.\r\n\r\n#### Chapter 1: Keep Sentences Short, Varied, and to One Main Idea\r\n* Vary sentence length to avoid tedium, but a safe average is probably around 20 words, with longish sentences reaching around 25.\r\n* Precede and follow a long or \"difficult\" sentence with short and crisp sentences. This gives the reader rest and adds variety like in natural speech.\r\n* The average sentence length, grade level, and Flesch Reading Ease score of your writing could be the difference between readability and unreadability.\r\n* Clarifying a subject-verb-object relationship is one way to rewrite a badly written passage.\r\n* For clear and readable lists, get the subject and verb out of the way early, and keep list items parallel, where the first word of each list item begins with the same part of speech.\r\n* A list fails when it begins a paragraph, hanging in a vacuum. Preface it with a sentence or fragment that sets it up.\r\n* Keep to one idea per sentence. You can use simple main idea-subordinate-idea sentences, as long as both ideas together don't result in an unmanageable sentence.\r\n* In technical writing, there's probably no reason to stretch sentence length beyond what bulleted lists can handle.\r\n* Some long sentences that work well introduce a single idea first and then only expand upon it.\r\n\r\n#### Chapter 2: Avoid Pretensions, Gobbledygook, and Euphemisms\r\n* Most educated Americans prefer to read at or below the 10th grade level, and an appropriate Flesch Reading Ease Index score for most writing is 60 or 70.\r\n* There's nothing intelligent about pretentious and abstract writing. One hallmark of intellect is the ability to make the complex easy to understand; anyone can be unclear.\r\n* The wasted time and effort as well as the cost of mistakes and misunderstanding make fuzzy writing an expensive habit wherever it flourishes.\r\n* Euphamisms at best amuse and at worst alienate. They don't soften language, but make the reader suspicious. Simple words seem more sincere and soften best.\r\n* A long word is the right word if it's the best word.\r\n* Say what something is not is misleading; say what it is.\r\n* Stop trying to impress and try instead to communicate, thereby using concrete and not abstract phrasing, and disabusing ourselves of the notion that big words sound more intelligent, more professional, and more serious.\r\n\r\n#### Chapter 3: Change Long and Difficult Words to Short and Simple Words\r\n* Many of our most ancient words are one-syllable utterances. Such words tend to be concrete and emotive.\r\n* The clearest, most stirring writers and speakers depend upon plain, short words. Such words usually don't go to war with each other; they have a nice mesh.\r\n* The clarity that comes with honest, basic expression benefits all writing. Utter simplicity offers the bedrock of authenticity.\r\n* The more words we know, the surer and freer we are to choose the plainest, simplest, and right words.\r\n* Use complex words when they're the best choice for the context. But whenever we have a choice, we choose the shortest words.\r\n\r\n#### Chapter 4: Be Wary of Jargon, Fad, and Cliché\r\n* Good jargon is a specialized term for a similarly specialized audience. The challenge for the communicator is translating jargon into plain English for a lay audience.\r\n* Good jargon sets forth the complex in economical, albeit specialized, language. Bad jargon sets forth the simple in bloated language.\r\n* Wrapped in jargon, inanities can actually sound smart, which is always hurtful to good communication and a sham.\r\n* The problem with language fad and cliché is such expression grows flat, predictable, and dull over time. Mimicry is the antithesis of freshness and originality.\r\n\r\n#### Chapter 5: Use the Right Word\r\n* How we use words matters if only because we may be judged ignorant (by some) for what they consider a misuse.\r\n* Avoid *alright* and *alot*, and use *all right* and *a lot* instead. *Awhile* is an adverb, while *a while* is a noun.\r\n* \"The whole *comprises* the parts.\" Avoid *comprise of*; instead use *consist of*, like \"The whole *consists of* the parts.\" But \"The parts *constitute* the whole.\"\r\n* *Forthcoming* means available or ready when needed, while *forthright* means candid, direct, and straightforward.\r\n* *Prerequisite* is a requirement or precondition, while *perquisite* is a benefit beyond one's salary, or perk.\r\n* *Prescribe* means to order, direct, or mandate, while *proscribe* means to prohibit.\r\n* *Refute* means to disprove with conclusive evidence, while *rebut* means to deny or dispute, but doesn't imply any evidence.\r\n\r\n#### Chapter 6: Avoid Beginning With Long Dependent Phrases\r\n* When a sentence begins with a preposition, verb, verbal, or with certain conjunctions and adverbs, it begins with a dependent phrase rather than the subject, thereby delaying its point.\r\n* Such sentences aren't caught because no one reads the \"backing-in\" phrases; our eyes skip ahead to the subject.\r\n* Backing into the first sentence of a piece is not attractive, but doing so later for transition and variety in sentence structure is sensible as long as the resulting sentence is clear.\r\n* To fix a backed-into beginning, simply start the sentence with the subject.\r\n* Especially avoid beginning a structure with a long, unanchored list. Instead, place the list after the subject, clarifying their relationship.\r\n* The worst fault of backing-in sentences is that they hide the subject. Readers learn some corollary thing about the subject before they even know what that subject is.\r\n* If a sentence backs-in to something or someone unknown, the reader is bewildered instead of interested.\r\n* Only back-in when we've considered the alternatives, we know what we're doing and why, we have specific stylistic purposes that the backing-in structure satisfies.\r\n\r\n#### Chapter 7: Prefer Active Verbs and the Active Voice\r\n* Just because a sentence has an auxiliary verb or a \"be\" verb does not mean that it is passive.\r\n* The passive voice may be more effective than the active voice when the actor is irrelevant or gets in the way of the main point.\r\n* Sometimes replacing a handful of weaker words with a single, strong verb leads to the active voice.\r\n* Writing in active voice is clearer, more vigorous, and shorter than writing in the passive voice.\r\n\r\n#### Chapter 8: Cut Wordiness\r\n* While a conversational style contributes to good writing, it is also wordy.\r\n* Cutting prepositional phrases tightens writing. For example, replace *in regard to* with *about*, *in the event that* with *if*, *were in agreement* with *agreed*, and so on.\r\n* Sentences that begin with *it* and *there* constructions are often wordy, and these constructions can be omitted.\r\n* Imprecise or unnecessary adverbs and qualifiers also can lead to wordiness, such as using *moved quickly* instead of *rushed* or *hurried*.\r\n* Phrases like \"many,\" \"most,\" and \"what many described as\" do not add specificity and can be omitted. Likewise, omit words that specify the obvious.\r\n* Pointless verb strings and unnecessary passives, or any handful of words instead of one active verb, can also lead to wordiness.\r\n\r\n#### Chapter 9: Avoid Vague Qualifiers\r\n* The word *very* and its siblings like *extremely*, *totally*, *completely*, *entirely*, *really*, *quite*, *rather*, *somewhat*, and *fairly* help us get closer to our meaning when we can't think of the perfect word.\r\n* If a word with a vague qualifier is really just fine standing alone, then the qualifier should be removed. The word left standing alone becomes stronger and more assertive.\r\n* Words like *dead*, *alive*, and *unique* have no degrees of meaning, like *pregnant*, and should not be qualified.\r\n* Sometimes intensifiers such as very are simply inflationary, or a way of exclaiming rather than explaining. Prefer the latter, adding vital and concrete information.\r\n* A good test for whether we have the right word is whether it can stand alone. If it can't, then find a replacement.\r\n\r\n#### Chapter 10: Prune Prepositions\r\n* A sentence generally can bear three prepositional phrases, but it breaks down rapidly if more are added after that, yielding an annoying singsong.\r\n* Some prepositional phrases can be rendered adjective-plus-noun. For example, *members of the faculty* becomes *faculty members*.\r\n* If trimming prepositions sacrifices incidental information, it can easily be placed in subsequent sentences.\r\n* Even when excessive prepositional phrases don’t damage clarity, they damage flow.\r\n\r\n#### Chapter 11: Limit Number and Symbol\r\n* Limit to three the numbers in a sentence if the reader must compare, contrast, or calculate with those numbers.\r\n* Numbers are even more confusing when they have different forms like percentages, fractions, written out, numerals, etc.\r\n* Symbols like dollar signs, decimals, percentage symbols, acronyms, or abbreviations are also visually uninviting.\r\n* Graphic explanation like bulleted lists, tabulated material, charts, and white space is both clearer and more attractive than prose with numbers and symbols.\r\n* Two exceptions to the three-number guideline include dates, and when each number in a consecutive run has the same form and identifies the same thing.\r\n\r\n#### Chapter 12: Get Right to the Point. And Stay There.\r\n* If a story is inherently dramatic, tell it simply and swiftly. A florid style or rhetorical devices such as repetition can seem melodramatic, and may even trivialize the tragic or poignant.\r\n* An opening anecdote should be short and pertinent. It should reveal something important about the story's theme and thus open a way in to the story, instead of getting in its way.\r\n* Be wary of frustrating the reader with unanswered questions, instead of creating in him or her a healthy sense of curiosity.\r\n* Failure to get right to the point and stay there is a chief cause of reader annoyance, whether from overwriting and wordiness, an ill-advised anecdote, or a dithering, vague style.\r\n\r\n### Section Two: Storytelling Devices\r\n\r\n#### Chapter 20: Write Fast, Edit Slow\r\n* We cannot forgive slow, because fast is interesting and slow is dull. Slow makes us wait for the *first* shoe to drop.\r\n* Reading aloud forces us to listen, helping us locate the slow parts that interfere with the reader's progress, or stifle a speedy and seamless flow of writing.\r\n* Such speedbumps include errors in content or form, distractions like awkward phrasing, the wrong word, and dense, wordy, fuzzy, repetitive, tentative, or extraneous passages.\r\n* Proper research, finding a focus or theme, dividing your work into pieces, devising a beginning, middle, and end, and making an outline can help you write fast-moving prose.\r\n* Most serious pace problems come from lack of focus and direction. Write a sentence that captures the essence of a section or chapter, and use it as a roadmap.\r\n* One of the best way to \"remove all things that are not the story\" is to keep them out of the story in the first place. Fast writing helps keep extraneous material out.\r\n* Don't edit as you write, or you'll lose momentum. You can edit slowly, because writing problems won't disappear as inspiration and spontaneity do.\r\n\r\n#### Chapter 21: Speedbumps\r\n* Mistakes, failing to get to the point or present material logically, excessive length, obtrusive or tangential material, bad diction, and packing too much into sentences can lead to slow reading.\r\n* The worst place to find speedbumps is at the beginning of the trip. Slow starts lose many readers, and clumsily executed anecdotal beginnings are among the worst offenders. \r\n* Multiple anecdotes at the beginning is confusing because the readers is left guessing what the story is about. Get them over with quickly or have them follow the main point.\r\n* Also mind not having a point, or failing to express that point briefly and clearly, or interrupting the work on the way to the point.\r\n* Subjects and verbs should be close together, as should verbs and objects.\r\n* Who, what, when, where, and why can wait if they’re going to get in the way of the message. Such information is not as important as writing well.\r\n* Writing entails organizing into families of related thought, but one-sentence-per-paragraph writing orphans every sentence. And each has the same weight, so the thesis is not clear.\r\n* Parenthetical or bracketed material is a major intrusion when striving for a conversational, story-telling style.\r\n\r\n#### Chapter 22: Logic and Speedy Reading\r\n* The writer and reader must proceed in lockstep. If the writer is slower than the reader, the reader gets impatient. If the writer gets ahead, readers may get lost.\r\n* Before embroidery comes the fabric, and the fabric of good writing is the tightly woven stuff of accuracy, clarity, brevity, precision, and logic.\r\n* Illogic and loose connections can drive readers away and damage the writer's credibility.\r\n* The essence of illogic is the non sequitur, which is an inference or conclusion that does not follow from the premise, such as in an if-then sentence.\r\n* Non sequiturs also arise from a comment following an unrelated comment, and even conjoining the two with *but*.\r\n* Trouble also arises from illogical word pairs, mishandled figurative expressions, and using arguably to introduce sweeping, illogical, and insupportable claims.\r\n\r\n### Section Three: A Handbook\r\n\r\n#### Chapter 23: A Brief (But Not Necessarily Easy) Quiz\r\n* Use adjectives rather than adverbs with sense verbs or with linking verbs such as forms of the verb *to be*, *seem*, *appear*, *become*, etc. For example, *the food smells bad*, but *she swam badly*. But *bad* describes condition or passive states, such as *he felt bad*, where *bad* modifies the subject *he*.\r\n* Only place a comma between adjectives if it could be replaced by *and*. For example, *a beautiful baby girl*, and *a large, ugly dog* are both correct.\r\n* Use possessive pronouns before gerunds, which are words that end in \"ing\" but act as nouns.\r\n* *Like* is not a conjunction; use it as a conjunction to compare nouns and pronouns. Use *as*, *as if*, or *as though* to introduce clauses, or a group of words containing both subject and verb.\r\n* When using the phrase \"one of those [nouns] who,\" the subject of the following verb is *who* and not *one*, and so the verb should adopt the plural and not the singular form.\r\n* The word *as* should not follow *equally*, or verbs such as *named*, *called*, *elected*, etc.\r\n* Subjective pronouns are *I*, *he*, *she*, *we*, *they*, or *who*. Objective pronouns are *me*, *him*, *her*, *us*, *them*, or *whom*.\r\n* *Myself* is a \"self\" pronoun that differs because it is neither a subject nor object, but a reflexive like *I hurt myself*, or an intensifier like *I myself am staying at home*.\r\n* Removing other people from the sentence and letting the pronoun stand alone, or replacing the pronoun with another one, quickly reveals whether it is a subject or object.\r\n* If a pronoun is preceded by *than*, and placing a verb after the pronoun makes grammatical sense, then choose the subjective form.\r\n\r\n#### Chapter 24: Dispelling the Myths\r\n* The infinitive is *to* plus a verb. The split infinitive separates the two, typically with an adverb, such as *to boldly go*. They are often unattractive, but they are not wrong.\r\n* Ending sentences with a preposition is fine, but omit the preposition if it is a gross redundancy, such as with *Where is it at?*\r\n* Avoid ambiguous contractions like *he'd*, *we'd*, and *I'd*. The first can mean either *he would*, or *he had*. Avoiding contractions also makes text more emphatic or stately.\r\n* Omitting the serial comma may cause ambiguities, whereas including it never will.\r\n* Regarding *none*, if it clearly means *no one* or *not one*, it's singular. If the stress is on *not any*, or is on more than one, or if the following noun cannot be construed as singular, treat *none* as plural.\r\n* If each person in a couple is acting individually, then *couple* is plural. But if two people are acting as one, then it is singular.\r\n* Collective nouns like *company*, *team*, and *committee* refer to an *it*, not a *they*, which can be awkward. Adding a plural noun to the collective one, like *faculty members*, can remedy this.\r\n* Retain *that* with sentences containing both attribution and time, and following words such as *announce*, *believe*, *thought*, *reveal*, *declare*, *understand*, *assert*, *assume*, *allege*, and so on.\r\n* Use *a* before a consonant sound and *an* before a vowel sound. And so *an NCAA policy*, *a eulogy*, *an herb*, and *a herbicide* are all correct.\r\n\r\n#### Chapter 25: Style Guide\r\n* Use *a.m.* and *p.m.* instead of *AM* and *PM*.\r\n* *Anno* and *annus* mean *year*, so use *first anniversary* instead of *one-year anniversary* and *25th anniversary* instead of *25-year anniversary*. *Three-week anniversary* and *one-month anniversary* are incorrect.\r\n* It's *backward*, not *backwards*. Likewise, it's *toward*, not *towards*.\r\n* It's the *better* of two, and the *best* of three or more.\r\n* Countries have *citizens*, while cities and states have *residents*.\r\n* Avoid the colon after a *be* verb, like *The three objectives of the new plan are:*\r\n* Place a comma before a conjunction midsentence if what follows the conjunction could stand as a complete sentence.\r\n* If a city and state, or a month, day, and year appear midsentence, then place a comma both before and after the state or the year. But no comma is necessary between month and year when the day is absent.\r\n* *et al*, *e.g.*, and *i.e.* should be lowercase and italicized.\r\n* Use commas both before and after *etc.* when it appears midsentence.\r\n* Use *hang on to* or *hold on to*, but not *hang onto* or *hold onto*.\r\n* *Holdup* is a noun, while *hold up* is a verb.\r\n* *Likely* is not an adverb and should not be used as a substitute for *probably*. It's an adjective, parallel to *probable* rather than *probably*.\r\n* *Makeup* is a noun, *make up* is a verb, and *make-up* is an adjective.\r\n* *Mini* generally has no hyphen. *mid* generally has no hyphen unless followed by a capital letter or numeral. *Non* is generally not hyphenated except before a proper noun or to avoid awkward constructions, like *nonnuclear*.\r\n* Write out the numerals one through nine, while use numerals for 10 or more. Avoid numerals at sentence beginnings.\r\n* *One of the only* is an illiteracy; it should be *one of the few*.\r\n* Use *percent* in text, and the symbol *%* for charts, graphs, tabulated material, lists, and the like.\r\n* Write out state names in text, and reserve postal abbreviations for lists, charts, or graphic material.\r\n* Don't mark deletions at sentence beginning; just start the quotation there. An ellipsis at sentence end is four spaced dots, the last being the period.\r\n* Avoid the constructions *the reason is because* and *the reason why*. The text within or following them can stand alone.\r\n* Hyphenate *re-create* when meaning to create again rather than fun or leisure activity.\r\n* *Round trip* is a noun, while *round-trip* is an adjective.\r\n* If you are including *sic.* or many brackets in a quote, it should be paraphrased or made a partial quote.\r\n* Drop *single* from *single most*, *single best*, and *single biggest*.\r\n* Replace *the past decade* with *the last decade*.\r\n* *These* and *this* point forward, while *those* and *that* point back.\r\n* Don't use a hyphen between times; instead, use *from/to*, or *between/and*.\r\n* Capitalize the first and last words of a title and all the principal words between. Lowercase articles, *to*, coordinating conjunctions, and prepositions fewer than four letters. Capitalize longer prepositions like *between*, *toward*, *beyond*, *among*, *with*, and *from*.\r\n* The initial article *A*, *An*, or *The* in titles can be omitted if the article follows a possessive noun or pronoun, or if the article follows an adjective or another article.\r\n* Avoid using *verbal agreement* for *oral agreement*, as the preferred meaning of *verbal* is words, both written and spoken.\r\n* *Wait for*, and not *wait on*, unless one is waiting on tables.", 
			3 ],
		 [ "Subtle Art of Not Giving a F*ck", 
			"### Chapter 1: Don't Try\r\n\r\n* Conventional life advice, or all the positive stuff and happy self-help stuff we hear all the time, fixates on what you lack.\r\n* If you're dreaming of something all the time, then you're reinforcing the same unconscious reality over and over: that you are _not that_.\r\n\r\n#### The Feedback Loop from Hell\r\n\r\n* Consumer culture and social media has bred a whole generation who believe that having negative experiences like anxiety, fear, guilt, etc is not okay.\r\n* The desire for more positive experience is itself a negative experience, while the accepting of one's negative experience is itself a positive experience.\r\n* Everything worthwhile in life is won through surmounting the associated negative experience, so don't try to escape it.\r\n* You must learn how to focus and prioritize your thoughts effectively, or how to pick and choose what matters to you and what doesn't based on finely honed personal values.\r\n\r\n#### The Subtle Art of Not Giving a Fuck\r\n\r\n* Subtlety #1: Not giving a fuck doesn't mean being indifferent; it means being comfortable with being different.\r\n * Indifferent people are afraid of the world and the repercussions of their own choices, which is why they don't make any meaningful choices.\r\n * You must say \"fuck it\" not to everything in life, but rather to everything unimportant in life. Save your fucks for what truly matters.\r\n* Subtlety #2: To not give a fuck about adversity, you must first give a fuck about something more important than adversity.\r\n * If you don't find that meaningful something, your fucks will be given to meaningless and frivolous causes.\r\n* Subtlety #3: Whether you realize it or not, you are always choosing what to give a fuck about.\r\n * Maturity is what happens when we learn to give fucks about only what's truly fuckworthy.\r\n\r\n#### So Mark, What the Fuck Is the Point of This Book Anyway?\r\n\r\n* Practical enlightenment is becoming comfortable with the idea that some suffering is inevitable, and that no matter what you do, life is comprised of failures, loss, and even death.\r\n* The only way to overcome pain is to first learn how to bear it.\r\n\r\n### Chapter 2: Happiness Is a Problem\r\n\r\n* Pain and loss are inevitable and we should let go of trying to resist them.\r\n* Happiness is not a solvable equation. Dissatisfaction and unease are inherent parts of human nature, and necessary components to creating constant happiness.\r\n\r\n#### The Misadventures of Disappointment Panda\r\n\r\n* We suffer because it is biologically useful: It is nature's preferred agent for inspiring change.\r\n* A constant dissatisfaction has kept our species fighting and striving, building and conquering.\r\n* A society that coddles itself more and more from the discomforts of life is dangerous: We lose the benefits of experiencing healthy doses of pain, which disconnects us from the reality of the world around us.\r\n\r\n#### Happiness Comes from Solving Problems\r\n\r\n* True happiness occurs when you find the problems you enjoy having and enjoy solving.\r\n* Instead of solving, people either a) deny they exist in the first place, or b) choose to believe that there is nothing they can do to solve their problems, even when there is.\r\n* Forms of blame and denial allow us to temporarily escape our problems, and that escape can provide us a quick rush to feel better.\r\n\r\n#### Emotions are Overrated\r\n\r\n* Negative emotions are a call to action. When you feel them, it's because you're supposed to _do something_.\r\n* To deny one's negative emotions is to deny many of the feedback mechanisms that help a person solve problems.\r\n\r\n#### Choose Your Struggle\r\n\r\n* An interesting question that most people will never consider is \"What _pain_ do you want in your life? What are you willing to struggle for?\" \r\n* Real, serious, lifelong fulfillment and meaning have to be earned through the choosing and managing of our struggles.\r\n* What determines your success isn't \"What do you want to enjoy?\" but \"What pain do you want to sustain?\" Our struggles determine our success.\r\n\r\n### Chapter 3: You Are Not Special\r\n\r\n* A true and accurate measurement of one's self-worth is how you feel about the negative aspects of yourself.\r\n* Entitled people have a delusional degree of self-confidence.\r\n* Because entitled people are incapable of acknowledging their problems openly and honestly, they are incapable of improving their lives in any lasting or meaningful way.\r\n\r\n#### Things Fall Apart\r\n\r\n* If we have problems that are unsolvable, our unconscious figures that we're uniquely special or uniquely defective in some way. Put simply: we become entitled.\r\n* Entitled people flip between being on top of the world or having the world on top of them, demanding special treatment in each case.\r\n* It takes just as much energy and delusional self-aggrandizement to maintain the belief that one has insurmountable problems as that one has no problems at all.\r\n* In an age when we're more connected than ever, entitlement seems to be at an all-time high.\r\n\r\n#### The Tyranny of Exceptionalism\r\n\r\n* Our lives today are filled with information from the extremes of the bell curve of human experience, because in the media business that what sells.\r\n* This flood of extreme information has conditioned us to believe that exceptionalism is the new normal. Because we are mostly average, this drives us to feel insecure and desperate.\r\n\r\n#### B-b-b-but If I'm Not Going to Be Special or Extraordinary, What's the Point?\r\n\r\n* When a culture's standard of success is \"be extraordinary,\" it's better to be at the low end of the bell curve than in the middle, because there you're still special and deserve attention.\r\n* People who become great at something become great because they understand that they're only mediocre, and that they could be so much better. It's anti-entitlement.\r\n\r\n### Chapter 4: The Value of Suffering\r\n\r\n* If suffering is inevitable and our problems are unavoidable, then we should not ask \"How do I stop suffering?\" but instead \"Why am I suffering – for what purpose?\"\r\n\r\n#### The Self-Awareness Onion\r\n\r\n* The first layer of self-awareness is a simple understanding of one's emotions.\r\n* The second layer is the ability to ask why we feel some way; these questions are important because they illuminate what we consider success or failure.\r\n* The third layer integrates our personal values; this is important because our values determine the nature of our problems, which in turn determines the quality of our lives.\r\n* We must ask these questions accurately to achieve a deeper knowledge of our own values.\r\n* What is objectively true about your situation is not as important as how you come to see the situation, and how you choose to measure it and value it.\r\n* Problems may be inevitable, but their _meaning_ is not. We can control our problems mean based on how we choose to think about them, the standard by which we measure them.\r\n\r\n#### Rock Star Problems\r\n\r\n* If you want to change how you see your problems, you have to change what you value and how you measure failure or success.\r\n\r\n#### Shitty Values\r\n\r\n* Shitty values include:\r\n * Pleasure: People who focus their energy on superficial pleasures end up more anxious, more emotionally unstable, and more depressed.\r\n * Material Success: Once one is able to provide for basic physical needs (food, shelter, etc), the correlation between happiness and worldly success approaches zero.\r\n * Always Being Right: Assuming you're ignorant keeps you unattached to superstitions or poorly informed beliefs and promotes a constant state of learning and growth.\r\n * Staying Positive: Constant positivity is an avoidance of life's problems – but upon choosing the right values and metrics, these problems should motivate you.\r\n* The trick with negative emotions is to 1) express them in a socially acceptable and healthy manner, and 2) express them in a way that aligns with your values.\r\n\r\n#### Defining Good and Bad Values\r\n\r\n* Good values are reality-based, socially-constructive, and immediate and controllable; while bad values are superstitious, socially destructive, and not immediate or controllable.\r\n* Good values are achieved internally, and thereby controllable so that you engage the world as it is rather than by how you wish it were.\r\n* Bad values are generally reliant on external events, and thereby outside your control so that you must rely on socially destructive or superstitious means to achieve them.\r\n* Values are about prioritization: What values do you prioritize above all else, and therefore influence your decision-making above all else?\r\n* By choosing better values, you divert your fucks to something better – to things that matter, improve our state of well-being and generate happiness, pleasure, and success as side-effects.\r\n* When you give better fucks, you get better problems. And when you get better problems, you get a better life.\r\n\r\n### Chapter 5: You Are Always Choosing\r\n\r\n* When we feel like we are choosing problems, we feel empowered. When we feel like our problems are being forced upon us, we feel victimized and miserable.\r\n\r\n#### The Choice\r\n\r\n* We don't always control what happens to us. But we _always_ control how we interpret what happens to us, as well as how we respond.\r\n* Whether we like it or not, we are _always_ taking an active role in what's occurring around or within us. We are _always_ choosing, whether we recognize it or not.\r\n\r\n#### The Responsibility/Fault Fallacy\r\n\r\n* The more we choose to accept responsibility into our lives, the more power we will exercise over our lives. Accepting responsibility for our problems is the first step to solving them.\r\n* We hesitate to take responsibility for our problems because we believe that to be _responsible_ for our problems is to also be at _fault_ for our problems.\r\n* But we are responsible for experiences that aren't our fault all the time.\r\n* Fault results from choices that have already been made. Responsibility results from the choices you're currently making, every second of every day.\r\n* Responsibility means you get to choose how you see things, how you react to things, and how you value things. You choose the metric by which to measure your experiences.\r\n* Taking responsibility for our problems is far more important than taking responsibility for success and happiness, because that's where the real learning comes from.\r\n\r\n#### Responding to Tragedy\r\n\r\n* Pain of one sort or another is inevitable for all of us, but again, we get to choose what it means to and for us.\r\n\r\n#### Genetics and the Hand We're Dealt\r\n\r\n* People who consistently make the best choices in the situations they're given are the ones who eventually come out ahead in life.\r\n\r\n#### Victimhood Chic\r\n\r\n* Public sharing of \"injustices\" garners attention and emotional outpouring, rewarding people who are able to perpetually feel victimized with ever-growing amounts of attention and sympathy.\r\n* The biggest problem with victimhood chic is that it diverts attention away from _actual_ victims.\r\n* But part of living in a democracy and a free society is that we all have to deal with views and people we don't necessarily like.\r\n\r\n#### There Is No \"How\"\r\n\r\n* You are _already choosing_, in every moment of every day, what to give a fuck about; so change is as simple as choosing to give a fuck about something else.\r\n\r\n### Chapter 6: You're Wrong About Everything (But So Am I)\r\n\r\n* Growth is endlessly iterative. We shouldn't seek to find the ultimate right answer for ourselves, but instead slowly chip away at the ways that we are wrong.\r\n* There is no correct dogma or perfect ideology, but only what your experience has shown to be right for you.\r\n* Instead of looking how we're right all the time, we should be looking for how we are wrong. Being wrong opens us up to change, and in turn brings us opportunity for growth.\r\n* Don't trust your conception of positive/negative experiences. All we know for certain is what hurts in the moment and what doesn't.\r\n\r\n#### Architects of Our Own Beliefs\r\n\r\n* What we understand as \"meaning\" is generated by the associations our brain makes between two or more experiences.\r\n* But there are two problems: The brain is imperfect, and once we create meaning for ourselves, our brains are designed to hold onto that meaning.\r\n* Many of our values are products of events that are not representative of the world at large, or of a totally misconceived past. So most of our beliefs are wrong.\r\n\r\n#### The Dangers of Pure Certainty\r\n\r\n* For individuals to feel justified in doing horrible things to others, they must feel an unwavering uncertainty in their own righteousness, beliefs, and deservedness.\r\n* The more you embrace being uncertain and not knowing, the more comfortable you will feel in knowing that you don't know.\r\n* Uncertainty is the root of all progress and growth, as the person who believes he knows everything learns nothing.\r\n* Before we can look at our values and priorities and change them into better, healthier ones, we must first become _uncertain_ of our current values.\r\n\r\n#### Manson's Law of Avoidance\r\n\r\n* Manson's Law of avoidance states the more something threatens your identity, the more you will avoid it.\r\n* Until we change how we view ourselves, what we believe we are and are not, we cannot overcome our avoidance and anxiety, and so we cannot change.\r\n\r\n#### Kill Yourself\r\n\r\n* There is little that is unique or special about your problems, and it's pure narcissism to believe otherwise.\r\n* Redefine your metrics in mundane and broad ways. The narrower and rarer the identity you choose for yourself, the more everything will seem to threaten your identity.\r\n\r\n#### How to Be a Little Less Certain of Yourself\r\n\r\n* To create uncertainty, ask yourselves three questions:\r\n * _What if I'm wrong?_ We are the worst observers of ourselves, and so chip away at your certainty by consistently questioning how wrong we might be about ourselves.\r\n * _What would it mean if I'm wrong?_ Being able to evaluate different values without necessarily adopting them is perhaps _the_ central skill in changing one's own life meaningfully.\r\n * _Would being wrong create a better or worse problem than my current problem, for both myself and others?_ Our problems are endless, so we must look at which problem is better.\r\n* If it feels like you versus the world, chances are it's really just you versus yourself.\r\n\r\n### Chapter 7: Failure Is the Way Forward\r\n\r\n#### The Failure/Success Paradox\r\n\r\n* Improvement at anything is based on thousands of tiny failures, and the magnitude of your success is based on how many times you've failed at something.\r\n* At some point, most of us reach a place where we're afraid to fail, and stick only to what is placed in front of us or only what we're really good at.\r\n* Shitty values involve tangible external goals outside our control, and once they're achieved you feel empty because there are no more problems to solve.\r\n* Better values are process-oriented, and their problems must continuously be re-engaged. Such a value is an ongoing, lifelong process that defies completion.\r\n* Consequently goals, as they are traditionally defined, are limited in the amount of happiness they can produce in our lives.\r\n\r\n#### Pain Is Part of the Process\r\n\r\n* We must suffer emotional pain to develop greater emotional resilience, a stronger sense of self, increased compassion, and a generally happier life.\r\n* If you avoid pain by chasing highs or indulging in entitlement or overindulging in substances, then you'll never generate the requisite motivation to actually change.\r\n* When you choose a new value, you choose to introduce a new form of pain into your life. Learn to sustain it, and act despite it.\r\n\r\n#### The \"Do Something\" Principle\r\n\r\n* The \"do something\" principle states: Action isn't just the effect of motivation; it's also the cause of it.\r\n* We assume a chain reaction of _emotional inspiration ⇒ motivation ⇒ desirable action_, but it's actually an endless loop: _inspiration ⇒ motivation ⇒ action ⇒ inspiration_.\r\n* We can therefore reorient our mindset around the chain _action ⇒ inspiration ⇒ motivation_.\r\n* So if you lack the motivation to make an important change in your life, _do something_ and then harness the reaction to that action as a way to begin motivating yourself.\r\n* With _doing something_ as your only metric for success, then even failure pushes you forward.\r\n\r\n### Chapter 8: The Importance of Saying No\r\n\r\n* The only way to achieve meaning and a sense of importance is one's life is through a rejection of alternatives, or a narrowing of freedom – a choice of commitment to one place, one belief, or one person.\r\n* Exposure to different cultural values and metrics forces you to reexamine what seems obvious in your own life and whether it's actually the best way to live.\r\n* There is such pressure in the West to be likable that people often reconfigure their entire personally depending on whom they're dealing with.\r\n\r\n#### Rejection Makes Your Life Better\r\n\r\n* We need to reject something. Or else we stand for nothing, and are without values and live our lives without any purpose.\r\n* To truly appreciate something, you must confine your life to it. There is a certain level of joy and meaning you reach only after focusing significant time on a single relationship, craft, or career.\r\n* Entitled people, because they feel as though they *deserve* to feel great all the time, avoid rejecting anything because doing so might make themselves or others feel bad.\r\n\r\n#### Boundaries\r\n\r\n* Healthy relationships are defined by 1) each person accepting responsibility, and 2) each person being willing to both reject and be rejected by their partner.\r\n* People in healthy relationships with strong boundaries take responsibility for their own values and problems, and do not take responsibility for those of their partner.\r\n* Entitled people either expect take others to take responsibility for their problems, or take on too much responsibility for other people's problems.\r\n* Entitled people adopt these strategies in their relationships, as with everything, to help avoid accepting responsibility for their own problems.\r\n* In an unhealthy relationship two people solve each other's problems to feel good about themselves. In a healthy relationship they solve their own problems to feel good about each other.\r\n* \"Victims\" and \"savers\" end up in relationships because they use each other to achieve emotional highs.\r\n* Acts of love are valid only if they're performed without conditions or expectations.\r\n* It's not about giving a fuck about everything your partner gives a fuck about; it's about giving a fuck about your partner regardless of the fucks he or she gives.\r\n\r\n#### How to Build Trust\r\n\r\n* Conflict exists to show us who is there for us unconditionally and who is just there for the benefits.\r\n* A healthy relationship requires both sides to be willing and able to say no and hear no, or else boundaries break down and one person's problems and values dominate the other's.\r\n* When trust is destroyed, it can be rebuilt only if 1) the trust-breaker admits and owns up to the true values that caused the breach, and 2) the trust-breaker builds a solid track record of improved behavior over time.\r\n\r\n#### Freedom Through Commitment\r\n\r\n* The more options we're given, the less satisfied we become with whatever we choose, because we're aware of all the other options we're potentially forfeiting.\r\n* There are some experiences that you can have only when living in the same place, being with the same person, or working on the same craft for significant time.\r\n* You will find increased opportunity and upside in rejecting alternatives and distractions in favor of what you've chosen to let truly matter to you.\r\n* The rejection of alternatives liberates us from things that do not align with our most important values or with our chosen metrics.\r\n\r\n### Chapter 9: ... And Then You Die\r\n\r\n* In a backwards way, death is the light by which the shadow of all life's meaning is measured.\r\n\r\n#### Something Beyond Our Selves\r\n\r\n* We are the only animals that are aware of the inevitability of our own death; this \"death terror\" is a deep existential anxiety that underlies everything we think or do.\r\n* To compensate for our mortality, we try to construct a conceptual self that will live forever. All human civilization is a result of such \"immortality projects.\"\r\n* Our immortality projects are our values – the barometers of meaning and worth in our life. And when our values fail, so do we, psychologically speaking.\r\n* Rather than attempting to implement our conceptual self across the world, we should question our conceptual self and become more comfortable with the reality of our own death.\r\n* Becoming comfortable with our mortality allows us to choose values more freely, unrestrained by the quest for immortality, and freed from dangerous dogmatic views.\r\n\r\n#### The Sunny Side of Death\r\n\r\n* Death confronts us all with a painful and important question: What is your legacy?\r\n* To be comfortable with death, see yourself as something bigger than yourself, choose values that go beyond serving yourself, and that are simple and immediate and controllable and tolerant of our chaotic world.\r\n* Our culture today confuses great attention with great success, but they are not the same.\r\n* There is nothing to be afraid of. Ever.", 
			3 ],
		 [ "Advanced DOM Scripting", 
			"### Chapter 1: Do It Right with Best Practices\r\n* pg 11: Instead of using inline event attributes, use unobtrusive techniques to add the event handlers when the window loads.\r\n* pg 14: Instead of browser sniffing to find what features you can use, use capability detection and check for the existence of methods directly.\r\n* pg 16: Don't require Javascript for content, as search engine crawlers will miss it.\r\n* pg 21: When creating your namespace with its methods, check that it doesn't already exist if your library is already included from another file.\r\n* pg 28: The display property can be toggled between `none` and empty (the string `''`), which is the default.\r\n* pg 31: Prefer single quotes in Javascript, and leave the double quotes for XHTML attributes as its specification requires.\r\n* pg 39: The `hasOwnProperty` method returns `true` if the object has the property or method specified, ignoring any inherited properties or methods.\r\n\r\n### Chapter 2: Creating Your Own Reusable Objects\r\n* pg 63: Static members exist only on a specific instance of an object, by manual assignment and not through any prototype property.\r\n* pg 67: Private methods are defined within a constructor or another method, but not available externally through any instance.\r\n* pg 68: Privileged methods are defined within the constructor using the `this` keyword, and can access private methods while being publicly accessible.\r\n* pg 70: When you declare function `foo() { ... }`, you can call the function before its definition. If you use var `foo = function() { ... }`, you can't.\r\n* pg 74: When a method of an object is used as an event handler, you can bind `this` to the object again using `call` or `apply`.\r\n\r\n### Chapter 3: Understanding the DOM2 Core and DOM2 HTML\r\n* pg 91: DOM Level 2 builds on Level 1 by specifying mouse-related events and the ability to access and manipulate CSS styles.\r\n* pg 94: Internet Explorer 7 only supports some of DOM Level 1, but supports some features of Level 2 (like events) in its own way.\r\n* pg 101: IE will only create a text node in the DOM if it contains something other than whitespace.\r\n* pg 105: The `nodeValue` property of a `Node` returns the value of an attribute node or the content of a text node, and `null` in most other cases.\r\n* pg 111: Attributes are implementations of the Core `Attr` interface and are contained in a `NamedNodeMap` in a node's `attribute` property.\r\n* pg 113: The `attributes.getNamedItem` method will work on any node, while the `getAttribute` method only works on instances of `Element`.\r\n* pg 117: Don't modify the prototype of any DOM classes like `Node`; it's flaky across browsers, and may override any future additions to the DOM specification.\r\n* pg 122: The `Document` class has a `getElementsByTagName` like `Element` does, but technically it's different; it also adds `getElementById`.\r\n* pg 126: The `HTMLDocument` class inherits from `Document`, and adds properties like `title`, `referrer`, `body`, `images`, `forms`, and `anchors`.\r\n* pg 127: The `HTMLElement` class inherits from `Element`, and adds properties like `id`, `title` (for tooltip rollovers), and `className`.\r\n* pg 133: The DOM names CSS properties like `font-size` as `fontSize`, and `class` as `className`.\r\n\r\n### Chapter 4: Responding to User Actions and Events\r\n* pg 154: The `mousemove` event has no specified period or distance in which it fires.\r\n* pg 156: A `click` and `dblclick` event will only happen if the mouse remains stationary; regardless of the mouse motion, a `mousedown` and `mouseup` event occurs.\r\n* pg 159: Key-related events apply only to the `document` object.\r\n* pg 161: The `focus` and `blur` evens only apply to `label`, `input`, `select`, `textarea`, and `button` form elements.\r\n* pg 182: Event listeners registered using the W3C event model do not necessarily execute in the order in which they're added.\r\n* pg 183: Beware that the `load` event is only executed after all the images have been loaded as well.\r\n* pg 196: A simple drag-and-drop effect can be created with a `mousemove` event listener that moves an element to the cursor's location.\r\n* pg 197: Keyboard commands are not in the DOM2 Events specification, but all browsers supply the Unicode value of a key press in the `keyCode` property.\r\n\r\n### Chapter 5: Dynamically Modifying Style and Cascading Style Sheets\r\n* pg 205: `CSSStyleSheet` represents a stylesheet with `CSSStyleRules`, while the `CSSStyleDeclaration` class represents an object's style property.\r\n* pg 214: A `CSSStyleDeclaration` instance of an element only contains the inline style properties, and hence does not contain the overall computed style.\r\n* pg 216: The only time mixing style and scripting is acceptable practice is in the case of positioning, e.g. drag-and-drop.\r\n* pg 220: Use the `className` property to assign classes, as `setAttribute` requires an attribute name of `'class'` in W3C and `'className'` in IE.\r\n* pg 222: Setting the `rel` attribute of a stylesheet link to `\"alternate stylesheet\"` will load the stylesheet but disable it; Javascript can enable it later.\r\n* pg 228: A new stylesheet can be used by dynamically creating a new link element referencing the stylesheet and adding it to the `head` tag.\r\n* pg 232: The W3C browsers contain the rules in a stylesheet in the variable `cssRules`, while IE contains them in `rules`.\r\n* pg 233: The W3C `insertRule` method combines the selector name and its definition in a single argument, while the `addRule` method of IE combines them.\r\n* pg 238: The computed style of an element is accessible through `document.defaultView.getComputedStyle` in W3C, and `element.currentStyle` in IE.\r\n\r\n### Chapter 7: Adding Ajax to the Mix\r\n* pg 286: IE 7 and later support the `XMLHttpRequest` object, while earlier versions must use the `Microsoft.XMLHTTP` ActiveX component.\r\n* pg 289: The `onreadystatechange` listener doesn't receive any arguments, so the `XMLHttpRequest` object must be defined in the same scope for it to be available.\r\n* pg 289: If the response has MIME type `application/xml`, the response will be interpreted as XML and not HTML, so the DOM2 HTML methods won't work.\r\n* pg 291: Within the `onreadystatechange` property, the `this` keyword refers to the method itself and not the `XMLHttpRequest` object.\r\n* pg 298: To parse JSON from an Ajax response, prefer a JSON parser over `eval` unless the information in the response is entirely controlled by you.\r\n* pg 307: To bypass cross-site restrictions, dynamically generated `script` elements can run with a source from any domain and their Javascript will run normally.\r\n* pg 328: Replies to concurrent requests may come back out of order; guard against this causing inconsistent application behavior.",
			1 ],
		 [ "DevOps Monitoring", 
			"### Introduction\r\n\r\nThis chapter focuses on software monitoring. Software monitoring comprises myriad types of monitoring and the considerations that come with them. Activities as varied as collecting metrics at various levels (resources/OS/middleware/application-level), graphing and analyzing metrics, logging, generating alerts concerning system health status, and measuring user interactions all are a portion of what is meant by monitoring.\r\n\r\nThe insights available from monitoring fall into five different categories:\r\n\r\n1. Identifying failures and the associated faults both at runtime and during postmortems held after a failure has occurred.\r\n2. Identifying performance problems of both individual systems and collections of interacting systems.\r\n3. Characterizing workload for both short-term and long-term capacity planning and billing purposes.\r\n4. Measuring user reactions to various types of interfaces or business offerings. A/B testing is disucssed in [Chapters 5](ch5.md) and [Chapter 6](ch6.md).\r\n5. Detecting intruders who are attempting to break into the system.\r\n\r\nThe term **monitoring** refers to the process of observing and recording system state changes and data flows:\r\n\r\n* **State changes** can be expressed by direct measurement of the state or by logs recording updates that impact part of the state.\r\n* **Data flows** can be captured by logging requests and responses between both internal components and external systems.\r\n\r\nThe software supporting such a process is called a **monitoring system**.\r\n\r\nMonitoring a workload include the tools and infrastructure associated with operations activities. All of the activities in an environment contribute to a datacenter’s workload, and this includes both operations-centric and monitoring tools.\r\n\r\nDevOps’ continuous delivery/ deployment practices and strong reliance on automation mean that changes to the system happen at a much higher frequency. Use of a microservice architecture also makes monitoring of data flows more challenging.\r\n\r\nSome examples of the new challenges are:\r\n\r\n* **Monitoring under continuous changes is difficult.**\r\n * Traditional monitoring relies heavily on anomaly detection. You know the profile of your system during normal operation. You set thresholds on metrics and monitor to detect abnormal behavior. If your system changes, you may have to readjust them. This approach becomes less effective if your system is constantly changing due to continuous deployment practices and cloud elasticity.\r\n * Setting thresholds based on normal operation will trigger multiple false alarms during a deployment. Disabling alarms during deployments will, potentially, miss critical errors when a system is already in a fairly unstable state. Multiple deployments can simultaneously occur as we discussed in Chapter 6, and these deployments further complicate the setting of thresholds.\r\n* **The cloud environment introduces different levels from application programming interface (API) calls to VM resource usage.** Choosing between a top-down approach and a bottom-up approach for different scenarios and balancing the tradeoffs is not easy.\r\n* **Monitoring requires attention to more moving parts** (when adopting the microservice architecture as introduced in [Chapter 4](ch4.md)).\r\n * It also requires logging more inter-service communication to ensure a user request traversing through a dozen services still meets your service level agreements. If anything goes wrong, you need to determine the cause through analysis of large volumes of (distributed) data.\r\n* **Managing logs becomes a challenge in large-scale distributed systems.**\r\n * When you have hundreds or thousands of nodes, collecting all logs centrally becomes difficult or prohibitively expensive. Performing analysis on huge collections of logs is challenging as well, because of the sheer volume of logs, noise, and inconsistencies in logs from multiple independent sources.\r\n\r\nMonitoring solutions must be tested and validated just as other portions of the infrastructure. Testing a monitoring solution in your various environments is one portion of the testing, but the scale of your non-production environments may not approach the scale of your production—which implies that your monitoring environments may be only partially tested prior to being placed into production\r\n\r\n### What to Monitor\r\n\r\nThe following table lists the insights you might gain from the monitoring data and the portions of the stack where such data can be collected: [p129]\r\n\r\nGoal of Monitoring | Source of Data\r\n------------------ | --------------\r\nFailure detection | Application and infrastructure\r\nPerformance degradation detection | Application and infrastructure\r\nCapacity planning | Application and infrastructure\r\nUser reaction to business offerings | Application\r\nIntruder detection | Application and infrastructure\r\n\r\nThe fundamental items to be monitored consist of inputs, resources, and outcomes:\r\n\r\n* The resources can be hard resources such as CPU, memory, disk, and network (even if virtualized).\r\n* They can also be soft resources such as queues, thread pools, or configuration specifications.\r\n* The outcomes include items such as transactions and business-oriented activities.\r\n\r\n#### Failure Detection\r\n\r\nAny element of the physical infrastructure can fail. Total failures are relatively easy to detect: No data is flowing where data used to flow. It is the partial failures that are difficult to detect, for instance: a cable is not firmly seated and degrades performance; before a machine totally fails because of overheating it experiences intermittent failure; and so forth.\r\n\r\nDetecting failure of the physical infrastructure is the datacenter provider’s problem. Instrumenting the operating system or its virtual equivalent will provide the data for the datacenter.\r\n\r\nSoftware can also fail, either totally or partially. Total failure is relatively easy to detect. Partial software failures have myriad causes (similar to partial hardware failures):\r\n\r\n* The underlying hardware may have a partial failure;\r\n* A downstream service may have failed;\r\n* The software (or its supporting software) may have been misconfigured.\r\n\r\nDetecting software failures can be done in one of three fashions:\r\n\r\n1. The monitoring software performs **health checks** on the system from an external point.\r\n2. A **special agent inside the system** performs the monitoring.\r\n3. The **system itself** detects problems and reports them.\r\n\r\nPartial failures may also manifest as performance problems (discussed in the following subsection).\r\n\r\n#### Performance Degradation Detection\r\n\r\nDetecting performance degradations is the most common use of monitoring data. Degraded performance can be observed by comparing current performance to historical data, or by complaints from clients or end users. Ideally, the monitoring system catches performance degradation before users are impacted at a notable strength.\r\n\r\nPerformance measures include **latency**, **throughput**, and **utilization**.\r\n\r\n##### **Latency**\r\n\r\nLatency is the time from the initiation of an activity to its completion, which can be measured at various levels of granularity:\r\n\r\n* At a coarse grain, latency can refer to the period from a user request to the satisfaction of that request.\r\n* At a fine grain, latency can refer to the period from placing a message on a network to the receipt of that message.\r\n\r\nLatency can also be measured at either the infrastructure or the application level. Measuring latency across different physical computers is more problematic because of the difficulty of synchronizing clocks.\r\n\r\nLatency is cumulative in the sense that the latency of responding to a user request is the sum of the latency of all of the activities that occur until the request is satisfied, adjusted for parallelism. It is useful when diagnosing the cause of a latency problem to know the latency of the various subactivities performed in the satisfaction of the original request. [p131]\r\n\r\n##### **Throughput**\r\n\r\nThroughput is the number of operations of a particular type in a unit time. Although throughput could refer to infrastructure activities (e.g., the number of disk reads per minute), it is more commonly used at the application level. For example, the number of transactions per second is a common reporting measure.\r\n\r\n<u>Throughput provides a system-wide measure involving all of the users, whereas latency has a single-user or client focus.</u> High throughput may or may not be related to low latency. The relation will depend on the number of users and their pattern of use.\r\n\r\nA reduction in throughput is not, by itself, a problem. The reduction in throughput may be caused by a reduction in the number of users. Problems are indicated through the coupling of throughput and user numbers.\r\n\r\n##### **Utilization**\r\n\r\nUtilization is the relative amount of use of a resource and is typically measured by inserting probes on the resources of interest. For example, the CPU utilization may be 80%. High utilization can be used as either of the following:\r\n\r\n* An early warning indicator of problems with latency or throughput,\r\n* A diagnostic tool used to find the cause of problems with latency or throughput.\r\n\r\nThe resources can either be at the infrastructure or application level:\r\n\r\n* Hard resources such as CPU, memory, disk, or network are best measured by the infrastructure.\r\n* Soft resources such as queues or thread pools can be measured either by the application or the infrastructure depending on where the resource lives.\r\n\r\nMaking sense of utilization frequently requires attributing usage to activities or applications. For example, *app1* is using 20% of the CPU, disk compression is using 30%, and so on. Thus, connecting the measurements with applications or activities is an important portion of data collection.\r\n\r\n#### Capacity Planning\r\n\r\nThere two types of capacity planning:\r\n\r\n* **Long-term capacity planning** involves humans and has a time frame on the order of days,\r\n* **Short-term capacity planning** is performed automatically and has a time frame on the order of minutes.\r\n\r\n##### **Long-Term Capacity Planning**\r\n\r\nLong-term capacity planning is intended to match hardware needs (whether real or virtualized) with workload requirements.\r\n\r\n* In a physical datacenter, it involves ordering hardware.\r\n* In a virtualized public datacenter, it involves deciding on the number and characteristics of the virtual resources that are to be allocated.\r\n\r\nIn both cases, the input to the capacity planning process is a characterization of the current workload gathered from monitoring data and a projection of the future workload based on business considerations and the current workload. <u>Based on the future workload, the desired throughput and latency for the future workload, and the costs of various provisioning options, the organization will decide on one option and provide the budget for it.</u>\r\n\r\n##### **Short-Term Capacity Planning**\r\n\r\nIn the cloud, short-term capacity planning means creating a new virtual machine (VM) for an application or deleting an existing VM.\r\n\r\n* A common method of making and executing these decisions (creating and deleting VMs) is based on monitoring information collected by the infrastructure.\r\n * [Chapter 4](ch4.md) discusses various options for controlling the allocation of VM instances based on the current load.\r\n * Monitoring the usage of the current VM instances was an important portion of each option.\r\n* Monitoring data is also used for billing in public clouds. In order to charge for use, the use must be determined, and this is accomplished through monitoring by the cloud provider.\r\n\r\n#### User Interaction\r\n\r\nUser satisfaction is an important element of a business. It depends on four elements that can be monitored:\r\n\r\n1. **The latency of a user request.** Users expect decent response times. Depending on the application, seemingly trivial variations in response can have a large impact.\r\n2. **The reliability of the system with which the user is interacting.** Failure and failure detection are discussed earlier.\r\n3. **The effect of a particular business offering or user interface modification.** A/B testing is discussed in [Chapters 5](ch5.md) and [Chapter 6](ch6.md). The measurements collected from A/B testing must be meaningful for the goal of the test, and the data must be associated with variant A or B of the system.\r\n4. **The organization’s particular set of metrics.** These metrics should be important indicators either of the following:\r\n * User satisfaction,\r\n * The effectiveness of the organization’s computer-based services.\r\n\r\nThere are generally two types of user interaction monitoring.\r\n\r\n1. **Real user monitoring** (RUM). RUM essentially records all user interactions with an application.\r\n * RUM data is used to assess the real service level a user experiences and whether server side changes are being propagated to users correctly.\r\n * RUM is usually passive in terms of not affecting the application payload without exerting load or changing the server-side application.\r\n2. **Synthetic monitoring**. It is similar to developers performing stress testing on an application.\r\n * Expected user behaviors are scripted either using some emulation system or using actual client software (such as a browser). However, the goal is often not to stress test with heavy loads, but to monitor the user experience.\r\n * Synthetic monitoring allows you to monitor user experience in a systematic and repeatable fashion, not dependent on how users are using the system right now.\r\n * Synthetic monitoring may be a portion of the automated user acceptance tests discussed in [Chapter 5](ch5.md).\r\n\r\n#### Intrusion Detection\r\n\r\nIntruders can break into a system by subverting an application (for example, through incorrect authorization or a man-in-the-middle attack). Applications can monitor users and their activities to determine whether the activities are consistent with the users’ role in the organization or their past behavior.\r\n\r\nFor instance, if user John has a mobile phone using the application, and the phone is currently in Australia, any log-in attempts from, say, Nigeria should be seen as suspicious.\r\n\r\n##### **Intrusion detector** *\r\n\r\nAn **intrusion detector** is a software application that monitors network traffic by looking for abnormalities. These abnormalities can be caused by:\r\n\r\n* Attempts to compromise a system by unauthorized users,\r\n* Violations of an organization’s security policies.\r\n\r\nIntrusion detectors use a variety of different techniques to identify attacks. They frequently use historical data from an organization’s network to understand what is normal. They also use libraries that contain the network traffic patterns observed during various attacks. Current traffic on a network is compared to the expected (from an organization’s history) and the abnormal (from the attack history) to decide whether an attack is currently under way.\r\n\r\nIntrusion detectors can also monitor traffic to determine whether an organization’s security policies are being violated without malicious intent.\r\n\r\nIntrusion detectors generate alerts and alarms as discussed in [Section 7.5](#interpreting-monitoring-data). Problems with false positives and false negatives exist with intrusion detectors as they do with all monitoring systems.\r\n\r\n### How to Monitor\r\n\r\nMonitoring systems interact with the elements being monitored, as shown in the figure below.\r\n\r\n[![Figure 7.1 Monitoring system interacting with the elements being monitored [Notation: Architecture]](https://github.com/shichao-an/notes/raw/master/docs/devops/figure_7.1.png)](figure_7.1.png \"Figure 7.1 Monitoring system interacting with the elements being monitored [Notation: Architecture]\")\r\n\r\nThe system to be monitored can be as broad as a collection of independent applications or services, or as narrow as a single application:\r\n\r\n1. **Agentless monitoring**. If the system is actively contributing to the data being monitored (the arrow labeled \"agentless\") then the monitoring is intrusive and affects the system design.\r\n2. **Agent-based monitoring**. If the system is not actively contributing to the data being monitored (the arrow labeled \"agent-based\") then the monitoring is nonintrusive and does not affect the system design.\r\n3. **Health checks**. A third source of data is indicted by the arrow labeled \"health checks\". External systems can also monitor system or application-level states through health checks, performance-related requests, or transaction monitoring\r\n\r\nThe data collected either through agents or through agentless means is eventually sent to a central repository (\"Monitoring data storage\" in [Figure 7.1](figure_7.1.png)). The central repository is typically distributed (logically but not physically central). Each step from the initial collection to the central repository can do filtering and aggregation.\r\n\r\nThe considerations in determining the amount of filtering and aggregation are:\r\n\r\n* The volume of data being generated,\r\n* The potential failure of local nodes,\r\n* The granularity of the necessary communication.\r\n\r\nRetrieving the data from local nodes is important because the local node may fail and the data become unavailable. Sending all of the data directly to a central repository may introduce congestion to the network. Thus, selecting the intermediate steps from the local nodes to the central repository and the filtering and aggregation done at each step are important architectural decisions when setting up a monitoring framework.\r\n\r\nOnce monitoring data is collected, you can do many things:\r\n\r\n* Alarms can be configured to trigger alerts that notify operators or other systems about major state changes.\r\n* Graphing and dashboards can be used to visualize system state changes for human operators.\r\n* A monitoring system also allows operators to drill down into detailed monitoring data and logs, which is important for error diagnosis, root cause analysis, and deciding on the best reaction to a problem.\r\n\r\nThe traditional view of the monitoring system (as discussed so far) is increasingly being challenged by new interactions between the monitoring system and other systems, which are shown outside of the dotted areas in [Figure 7.1](figure_7.1.png).\r\n\r\nYou can perform stream processing and (big) data analytics on monitoring data streams and historical data. Not only can you gain insights into system characteristics using system-level monitoring data, you may also gain insights into user behaviors and intentions using application- and user-level monitoring data.\r\n\r\nBecause of these growing different uses of monitoring data, many companies are starting to use a unified log and metrics-centric publish-subscribe architecture for both the monitoring system and the overall application system. More and more types of data, including nontraditional log and metrics data, are being put into a unified storage, where various other systems (whether monitoring-related or not) can subscribe to the data of interest. Several implications of the unified view are:\r\n\r\n* It significantly reduces the coupling of any two systems. <u>Systems interact with the unified log in a publish-subscribe fashion that makes publishers ignorant of the specific identity of the subscriber and vice versa.</u>\r\n* It simplifies the integration of multiple sources of data. <u>Using a central log store allows data to be correlated based on attributes such as time stamps rather than their source.</u> [p136]\r\n\r\nThe line between the monitoring system and the system to be monitored is getting blurred when application and user monitoring data are treated the same as system-level monitoring data: data from anywhere and at any level could contribute to insights about both systems and users.\r\n\r\nThe following sections discuss the method of retrieving monitoring data, monitoring operations, and data collection and storage:\r\n\r\n#### Agent-Based and Agentless Monitoring\r\n\r\nIn some situations, the system to be monitored already has internal monitoring facilities that can be accessed through a defined protocol. For example:\r\n\r\n* The [Simple Network Management Protocol](https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol) (SNMP) is a common mechanism for gathering metrics from servers and network equipment. It is especially useful on network equipment because that equipment often comes as a closed system and you cannot install monitoring agents.\r\n* You can use protocols like Secure Shell (SSH) to remotely access a system and retrieve available data.\r\n* [Application Response Measurement](https://en.wikipedia.org/wiki/Application_Response_Measurement) (ARM) is an industry standard that provides ways for an application to trigger actions such as requesting an external ARMsupported system to start or stop tracking a transaction and correlating times spent in different systems for a single transaction.\r\n\r\n Agentless monitoring is particularly useful when you cannot install agents, and it can simplify the deployment of your monitoring system.\r\n\r\nThe agent-based and agentless approaches both have their strengths and weaknesses:\r\n\r\n* **Agentless**. <u>The **agentless** approach is better in terms of deployment and maintenance effort.</u> However, it is less secure if the collection repository is outside of your network because more ports need to be opened and firewall rules relaxed to allow different layers of a system to communicate its data to the external world.\r\n* **Agent-based**. In contrast, an **agent** on a host can communicate with the OS and applications locally and send all collected information over a single channel. <u>This also allows an agent-based approach to optimize network traffic and processing overhead.</u>\r\n* **External**. In addition to collecting monitoring data from inside a system, you can collect information from an external viewpoint. You can set up **health checks** to periodically check a system or conduct performance monitoring from an external user’s point of view\r\n\r\nQuestions to be considered when designing a system include:\r\n\r\n* Where does this information come from?\r\n* How does this information fit into the application and monitoring architecture?\r\n* What are the quality implications?\r\n\r\n#### Monitoring Operation Activities\r\n\r\nSome operations tools (such as Chef) monitor resources such as configuration settings to determine whether they conform to prespecified settings. We also mentioned monitoring resource specification files to identify changes. Both of these types of monitoring are best done by agents that periodically sample the actual values and the files that specify those values.\r\n\r\nTreating infrastructure-as-code implies that infrastructure should contribute monitoring information in the same fashion as other applications, which can be through any of the means discussed: agents, agentless, or external.\r\n\r\n[Chapter 14](ch14.md) discusses how to perform fine-grained monitoring of the behavior of operations tools and scripts. This can include assertions over monitoring data. <u>For instance, during a rolling upgrade a number of VMs are taken out of service to be replaced with VMs running a newer version of the application. Then you can expect the average CPU utilization of the remaining machines to increase by a certain factor.</u>\r\n\r\n#### Collection and Storage\r\n\r\nThe core of monitoring is recoding and analyzing time series data (a sequence of time-stamped data points):\r\n\r\n* These data points are acquired at successive intervals in time and represent certain aspects of states and state changes.\r\n* The system being monitored will generate time-stamped event notifications at various levels of severity. These notifications are typically output as logs.\r\n\r\nThe monitoring system can conduct direct measurement or collect existing data, statistics, or logs and then turn them into metrics (with time and space). The data is then transferred to a repository. The incoming data streams need to be processed into a time series and stored in a time series database.\r\n\r\nThree key challenges are: [p138]\r\n\r\n* **Collating related items by time.** Time stamps in a distributed system are not going to be consistent.\r\n * Different nodes in a single cluster may differ in their clocks by several microseconds.\r\n * Different nodes across multiple clusters may differ by much more.\r\n* **Collating related items by context.**\r\n* **The volume of monitoring data.** You may need a retention policy to cope with the volume of data collected.\r\n\r\nThe [Round-Robin Database](https://en.wikipedia.org/wiki/RRDtool) (RRD) is a popular time series database, which is designed for storing and displaying time series data with good retention policy configuration capabilities. Big data storage and processing solutions are increasingly used for monitoring data. You can treat your monitoring data as data streams feeding into streaming systems for real-time processing, combined with (big) historical data. You can load all your data into big data storage systems such as Hadoop Distributed File System (HDFS) or archive it in relatively inexpensive online storage systems such as [Amazon Glacier](https://aws.amazon.com/glacier/).\r\n\r\n### When to Change the Monitoring Configuration\r\n\r\nMonitoring is either time-based or event-based. Timing frequency and generation of events should all be configurable and changed in response to events occurring in the datacenter.\r\n\r\nSome examples of events that could change the monitoring configuration are:\r\n\r\n* **An alert.** One consequence of an alert could be that the frequency of sampling is increased. The frequency could be decreased if the alert does not turn into an alarm.\r\n* **Deployment.** Any of the deployment scenarios can trigger changes to monitoring:\r\n * Canary deployment. The new versions under test should be monitored more closely\r\n * Rolling upgrade. Closer monitoring will help detect the occurrence of a race condition more quickly.\r\n * Feature activation or deactivation. Feature changes should trigger changes in the monitoring configuration.\r\n* **Changes to any infrastructure software including DevOps tools.**\r\n* **Changes to any configuration parameters.** One of the major sources of errors in modern distributed systems is incorrect parameters.\r\n\r\n### Interpreting Monitoring Data\r\n\r\nAssume that the monitoring data (both time-based and event-based) has been collected in a central repository. This data is being added and examined continually, by both other systems and humans.\r\n\r\n#### Logs\r\n\r\nA log is a time series of events. Records are typically appended to the end of the log. Logs usually record the actions performed that may result in a state change of the system.\r\n\r\n[p140]\r\n\r\nLogs are used:\r\n\r\n* During operations to detect and diagnose problems.\r\n* During debugging to detect errors.\r\n* During post-problem forensics to understand the sequence that led to a particular problem.\r\n\r\nSome general rules about writing logs are:\r\n\r\n* Logs should have a consistent format.\r\n* Logs should include an explanation for why this particular log message was produced.\r\n* Log entries should include context information. Besides date and time, it also includes information to support tracking the log entry such as:\r\n * Source of the log entry within the code\r\n * Process ID for the process executing when the log entry was produced\r\n * Request ID for the request that caused that process to execute this log producer\r\n * VM ID for the VM that produced this message\r\n* Logs should provide screening information. Log messages are collected in a repository that is accessed through queries. Severity levels are an example of screening information, alert levels are another.\r\n\r\n#### Graphing and Display\r\n\r\nOnce you have all relevant data, it is useful to visualize it:\r\n\r\n* Some monitoring systems have strong visualization capabilities embedded.\r\n* There are also specialized systems just for visualization and querying, such as [Graphite](https://github.com/graphite-project/graphite-web), which support real-time graphing of large amounts of data.\r\n\r\nYou can set up a dashboard showing important real-time aspects of your system and its components at an aggregated level. You can also dive into the details interactively or navigate through history when you detect an issue. An experienced operator will use visual patterns of graphs to discern problems.\r\n\r\n[p141]\r\n\r\n#### Alarms and Alerts\r\n\r\nMonitoring systems inform the operator of significant events. This information can be in the form of either an alarm or an alert:\r\n\r\n* **Alerts** are raised for purposes of informing and may be in advance of an alarm (e.g., the datacenter temperature is rising);\r\n* **Alarms** require action by the operator or another system (e.g., the datacenter is on fire).\r\n\r\nAlarms and alerts can be triggered by any of the following:\r\n\r\n* Events (e.g., a particular physical machine is not responding),\r\n* Values crossing a threshold (e.g., the response time for a particular disk is greater than an acceptable value),\r\n* Sophisticated combinations of values and trends.\r\n\r\n[p141]\r\n\r\nThe typical issues are:\r\n\r\n* How do you configure your monitoring system to reduce **false positives** (alarms without the necessity for action) and **false negatives** (the necessity for action without an alarm being raised)?\r\n* How do you configure your monitoring system so that the alerts provide necessary information to diagnose an alarm?\r\n\r\nA problem for operators is receiving false positive alarms or a flood of alerts from different channels about the same event. Under such conditions, operators will quickly get \"alert fatigue\" and start ignoring alerts or simply turn some of them off. On the other hand, if you try to reduce false positives, you may risk missing important events, which increases false negatives.\r\n\r\nIf your alarms are very specific in their triggering conditions, you may be informed about some subtle errors early in their occurrence. However, you may risk rendering your alarms less effective when the system undergoes changes over time, or when the system momentarily exhibits interference of legitimate but previously unknown operations. [p142]\r\n\r\nSome general rules to improve the usefulness of alerts and alarms are:\r\n\r\n* Introduce context to your alarms.\r\n * This could be as simple as disabling certain alerts during specific times or actions; for example, when replacing a physical computer it does not make sense to raise alarms about the computer’s health.\r\n * Other more complex contexts could be related to external events or interfering operations.\r\n* <u>Alarms can not only go off if something happens, they can also be set to go off if an expected event did not happen</u>. This helps with drills and testing of your alarms since you can set an alarm to go off when an event that you know is not going to happen does not, in fact, happen.\r\n* Aggregate different alerts that are likely referring to the same events.\r\n* Set clear severity levels and urgency levels so people or systems receiving the alerts can act accordingly.\r\n\r\n#### Diagnosis and Reaction\r\n\r\nOperators often use monitoring systems to diagnose the causes and observe the progress of mitigation and recovery. However, monitoring systems are not designed for interactive or automated diagnosis. Thus, operators, in ad hoc ways, will try to correlate events, dive into details and execute queries, and examine logs. Concurrently, they manually trigger more diagnostic tests and recovery actions (such as restarting processes or isolating problematic components) and observe their effects from the monitoring system.\r\n\r\nThe essence of the skill of a reliability engineer is the ability to diagnose a problem in the presence of uncertainty. Once the problem has been diagnosed, frequently the reaction is clear although, at times, possible reactions have different business consequences. [p142-143]\r\n\r\n#### Monitoring DevOps Processes\r\n\r\nDevOps processes should be monitored so that they can be improved and problems can be detected.\r\n\r\nFive things that are important to monitor:\r\n\r\n1. A business metric\r\n2. Cycle time\r\n3. Mean time to detect errors\r\n4. Mean time to report errors\r\n5. Amount of scrap (rework)\r\n\r\n### Challenges\r\n\r\n#### Challenge 1: Monitoring Under Continuous Changes\r\n\r\n##### **Deviation from normal behavior** *\r\n\r\nIn operation, a deviation from normal behavior is a problem. Normal behavior assumes the system is relatively stable over time. However, in a large-scale complex environment, changes are the norm. Besides varying workloads or dynamic aspects of your application, which are often well anticipated, the new challenges come from both of:\r\n\r\n* Cloud elasticity makes infrastructure resources more volatile.\r\n* Automated DevOps operations trigger various sporadic operations (such as upgrade, reconfiguration, or backups).\r\n * Sporadic operations and continuous deployment and deployment practices make software changes more frequent.\r\n\r\nDeploying a new version into production multiple times a day is becoming a common practice:\r\n\r\n* Each deployment is a change to the system and may impact monitoring.\r\n* These changes may be happening simultaneously in different portions of an application or the infrastructure.\r\n\r\n##### **How to use the past monitoring data to do performance management, capacity planning, anomaly detection, and error diagnosis for the new system?** *\r\n\r\nIn practice, operators may turn off monitoring during scheduled maintenance and upgrades as a work-around to reduce false positive alerts triggered by those changes. However, this can lead to no monitoring (e.g. flying blind).\r\n\r\nThe following techniques can solve this:\r\n\r\n1. Carefully identify the non-changing portions of the data.\r\n * For example, use dimensionless data (i.e., ratios). You may find that although individual variables change frequently, the ratio of two variables is relatively constant.\r\n2. Focus monitoring on things that have changed.\r\n3. Compare performance of the canaries with historical performance. (As discussed in [Chapter 6](ch6.md), canary testing is a way of monitoring a small rollout of a new system for issues in production.) Changes that cannot be rationalized because of feature changes may indicate problems.\r\n\r\n##### **Specification of monitoring parameters** *\r\n\r\nThe specification of monitoring parameters is another challenge related to monitoring under continuous changes [p144].\r\n\r\nThe complexity of setting up and maintaining a monitoring system consists of:\r\n\r\n* Specifying what needs to be monitored\r\n* Setting thresholds\r\n* Defining the alerting logic\r\n\r\nContinuous changes in the system infrastructure and the system itself complicate the setting of monitoring parameters. Your monitoring may need to be adjusted for variance on the infrastructure side. [p144]\r\n\r\nAs a consequence, it makes sense to automate the configuration of alarms, alerts, and thresholds as much as possible. The monitoring configuration process is just another DevOps process to be automated:\r\n\r\n* When you provision a new server, registering this server in the monitoring system automatically.\r\n* When a server is terminated, a de-registration process should happen automatically.\r\n\r\n#### Challenge 2: Bottom-Up vs. Top-Down and Monitoring in the Cloud\r\n\r\n#### Challenge 3: Monitoring a Microservice Architecture\r\n\r\n#### Challenge 4: Dealing with Large Volumes of Distributed (Log) Data", 
			2 ]
 ]

 notes.each do |topic, content, user_id|
	Note.create( topic: topic, content: content, user_id: user_id )
 end
 =end